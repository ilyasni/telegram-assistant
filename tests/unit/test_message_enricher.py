"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è Message Enricher.

Context7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π forwards/reactions/replies –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π.
"""

import pytest
from unittest.mock import MagicMock
from datetime import datetime, timezone

# –ò–º–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
import sys
import os
shared_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'telethon-ingest'))
if shared_path not in sys.path:
    sys.path.insert(0, shared_path)

from services.message_enricher import (
    extract_forwards_details,
    extract_reactions_details,
    extract_replies_details
)


def test_extract_forwards_details_with_fwd_from():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è forwards —Å fwd_from."""
    # –°–æ–∑–¥–∞—ë–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fwd_from
    message = MagicMock()
    message.fwd_from = MagicMock()
    message.fwd_from.date = datetime(2025, 1, 1, 12, 0, 0, tzinfo=timezone.utc)
    message.fwd_from.channel_post = 12345
    message.fwd_from.from_id = MagicMock()
    message.fwd_from.from_id.channel_id = 67890
    message.fwd_from.from_name = "Test Channel"
    
    forwards = extract_forwards_details(message)
    
    assert len(forwards) == 1
    assert forwards[0]['from_chat_id'] == 67890
    assert forwards[0]['from_message_id'] == 12345
    assert forwards[0]['from_chat_title'] == "Test Channel"
    assert forwards[0]['forwarded_at'] == datetime(2025, 1, 1, 12, 0, 0, tzinfo=timezone.utc)


def test_extract_forwards_details_without_fwd_from():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ fwd_from."""
    message = MagicMock()
    message.fwd_from = None
    
    forwards = extract_forwards_details(message)
    
    assert len(forwards) == 0


def test_extract_forwards_details_no_attribute():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ fwd_from."""
    message = MagicMock()
    del message.fwd_from
    
    forwards = extract_forwards_details(message)
    
    assert len(forwards) == 0


def test_extract_reactions_details_with_results():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è reactions —Å results."""
    message = MagicMock()
    message.reactions = MagicMock()
    
    # –ú–æ–∫ reaction result
    reaction_result = MagicMock()
    reaction_result.chosen = False
    reaction_result.reaction = MagicMock()
    reaction_result.reaction.emoticon = "üëç"
    reaction_result.peer_id = MagicMock()
    reaction_result.peer_id.user_id = 12345
    
    message.reactions.results = [reaction_result]
    
    reactions = extract_reactions_details(message)
    
    assert len(reactions) == 1
    assert reactions[0]['reaction_type'] == 'emoji'
    assert reactions[0]['reaction_value'] == "üëç"
    assert reactions[0]['user_tg_id'] == 12345
    assert reactions[0]['is_big'] is False


def test_extract_reactions_details_custom_emoji():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è custom emoji —Ä–µ–∞–∫—Ü–∏–∏."""
    message = MagicMock()
    message.reactions = MagicMock()
    
    reaction_result = MagicMock()
    reaction_result.chosen = True
    reaction_result.reaction = MagicMock()
    reaction_result.reaction.document_id = 98765
    
    message.reactions.results = [reaction_result]
    
    reactions = extract_reactions_details(message)
    
    assert len(reactions) == 1
    assert reactions[0]['reaction_type'] == 'custom_emoji'
    assert reactions[0]['reaction_value'] == "98765"
    assert reactions[0]['is_big'] is True


def test_extract_reactions_details_without_reactions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ reactions."""
    message = MagicMock()
    message.reactions = None
    
    reactions = extract_reactions_details(message)
    
    assert len(reactions) == 0


def test_extract_replies_details_with_reply_to():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è replies —Å reply_to."""
    message = MagicMock()
    message.reply_to = MagicMock()
    message.reply_to.reply_to_msg_id = 11111
    message.reply_to.reply_to_peer_id = MagicMock()
    message.reply_to.reply_to_peer_id.channel_id = 22222
    
    post_id = "test-post-id-123"
    replies = extract_replies_details(message, post_id)
    
    assert len(replies) == 1
    assert replies[0]['post_id'] == post_id
    assert replies[0]['reply_message_id'] == 11111
    assert replies[0]['reply_chat_id'] == 22222


def test_extract_replies_details_without_reply_to():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ reply_to."""
    message = MagicMock()
    message.reply_to = None
    
    post_id = "test-post-id-123"
    replies = extract_replies_details(message, post_id)
    
    assert len(replies) == 0


def test_extract_replies_details_user_reply():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è reply –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = MagicMock()
    message.reply_to = MagicMock()
    message.reply_to.reply_to_msg_id = 33333
    message.reply_to.reply_to_peer_id = MagicMock()
    message.reply_to.reply_to_peer_id.user_id = 44444
    
    post_id = "test-post-id-456"
    replies = extract_replies_details(message, post_id)
    
    assert len(replies) == 1
    assert replies[0]['reply_author_tg_id'] == 44444


def test_extract_forwards_details_exception_handling():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ forwards."""
    message = MagicMock()
    message.fwd_from = MagicMock()
    # –í—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
    message.fwd_from.date = property(lambda self: (_ for _ in ()).throw(Exception("Test error")))
    
    # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    forwards = extract_forwards_details(message)
    assert len(forwards) == 0 or isinstance(forwards, list)


def test_extract_reactions_details_exception_handling():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ reactions."""
    message = MagicMock()
    message.reactions = MagicMock()
    # –í—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ results
    message.reactions.results = property(lambda self: (_ for _ in ()).throw(Exception("Test error")))
    
    # –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å, –∞ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    reactions = extract_reactions_details(message)
    assert len(reactions) == 0 or isinstance(reactions, list)


if __name__ == '__main__':
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ pytest –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    print("Testing message_enricher...")
    
    print("Testing extract_forwards_details...")
    test_extract_forwards_details_without_fwd_from()
    test_extract_forwards_details_no_attribute()
    print("‚úì Forward extraction tests passed")
    
    print("Testing extract_reactions_details...")
    test_extract_reactions_details_without_reactions()
    print("‚úì Reaction extraction tests passed")
    
    print("Testing extract_replies_details...")
    test_extract_replies_details_without_reply_to()
    print("‚úì Reply extraction tests passed")
    
    print("All basic tests passed!")

