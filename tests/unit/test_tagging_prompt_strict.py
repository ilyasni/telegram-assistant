"""Unit-—Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

import json
import pytest
from worker.prompts.tagging import STRICT_TAGGING_PROMPT


def test_prompt_format_contains_text_placeholder():
    """–ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
    text = "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å –æ—Ç–∫—Ä—ã–ª —Ö–∞–± –≤ –û–º—Å–∫–µ –¥–ª—è –∞–≤–∏–∞–∫–µ—Ä–æ—Å–∏–Ω–∞."
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    assert "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å" in prompt
    assert "–∞–≤–∏–∞–∫–µ—Ä–æ—Å–∏–Ω–∞" in prompt


def test_prompt_contains_strict_rules():
    """–ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
    assert "–ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞" in prompt
    assert "–º–µ—Ç–∞-—Ç–µ–≥–æ–≤" in prompt
    assert "JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫" in prompt
    assert "–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []" in prompt
    assert "—Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ" in prompt
    assert "–±–µ–∑ —Å–∏–Ω–æ–Ω–∏–º–æ–≤" in prompt


def test_prompt_forbids_meta_tags():
    """–ü—Ä–æ–º–ø—Ç –∑–∞–ø—Ä–µ—â–∞–µ—Ç –º–µ—Ç–∞-—Ç–µ–≥–∏."""
    text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
    assert "—ç–∫–æ–Ω–æ–º–∏–∫–∞" in prompt
    assert "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏" in prompt
    assert "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è–∞–Ω–∞–ª–∏—Ç–∏–∫–∞" in prompt
    assert "–∑–∞–ø—Ä–µ—â–µ–Ω—ã" in prompt


def test_prompt_requires_exact_substrings():
    """–ü—Ä–æ–º–ø—Ç —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫."""
    text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    assert "—Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ" in prompt
    assert "–±–µ–∑ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –æ–±–æ–±—â–µ–Ω–∏–π" in prompt


def test_prompt_output_format():
    """–ü—Ä–æ–º–ø—Ç —Ç—Ä–µ–±—É–µ—Ç JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫."""
    text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    assert "JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫" in prompt
    assert "–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π" in prompt
    assert "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" in prompt


TEST_CASES = [
    {
        "name": "meta_tags_forbidden",
        "text": "–¶–ë –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –æ–±–∑–æ—Ä –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å. –°—Ç–∞–≤–∫–∞ RUONIA —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å.",
        "expected": ["–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞", "ruonia"],
        "forbidden": ["—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"]
    },
    {
        "name": "synonyms_forbidden",
        "text": "–ì–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—ã–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ö–∞–± –≤ –û–º—Å–∫–µ –¥–ª—è –∞–≤–∏–∞–∫–µ—Ä–æ—Å–∏–Ω–∞.",
        "expected": ["–≥–∞–∑–ø—Ä–æ–º –Ω–µ—Ñ—Ç—å", "–æ–º—Å–∫–µ", "–∞–≤–∏–∞–∫–µ—Ä–æ—Å–∏–Ω–∞"],
        "forbidden": ["—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "–Ω–µ—Ñ—Ç–µ–≥–∞–∑"]
    },
    {
        "name": "empty_result_allowed",
        "text": "–°–µ–≥–æ–¥–Ω—è —Å—Ç—Ä–∏–º –≤ 19:00, —Ä–∞–∑–±–æ—Ä –±—ç–∫—Ç–µ—Å—Ç–æ–≤.",
        "expected": [],
        "forbidden": []
    }
]


@pytest.mark.parametrize("case", TEST_CASES, ids=[c["name"] for c in TEST_CASES])
def test_strict_tagging_rules(case):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Å—Ç—Ä–æ–≥–æ–≥–æ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –º–æ–∫ LLM, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—ë—Ç JSON-–º–∞—Å—Å–∏–≤
    # –î–ª—è unit-—Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–ø—Ç–∞
    prompt = STRICT_TAGGING_PROMPT.format(text=case["text"])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ
    assert "–ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞" in prompt
    assert "–º–µ—Ç–∞-—Ç–µ–≥–æ–≤" in prompt
    assert "JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫" in prompt
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ
    for word in case["text"].split()[:3]:  # –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞
        assert word in prompt


def test_prompt_handles_empty_text():
    """–ü—Ä–æ–º–ø—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç."""
    text = ""
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    # –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–∞–∂–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    assert "–ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞" in prompt
    assert "–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []" in prompt


def test_prompt_handles_special_characters():
    """–ü—Ä–æ–º–ø—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."""
    text = "–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏ üöÄ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ #hashtag @mention"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    assert "–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏" in prompt
    assert "—Å–∏–º–≤–æ–ª–∞–º–∏" in prompt


def test_prompt_requires_clean_tags():
    """–ü—Ä–æ–º–ø—Ç —Ç—Ä–µ–±—É–µ—Ç —á–∏—Å—Ç—ã–µ —Ç–µ–≥–∏ –±–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏."""
    text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    prompt = STRICT_TAGGING_PROMPT.format(text=text)
    
    assert "–ù–∏–∫–∞–∫–∏—Ö —Ö—ç—à—Ç–µ–≥–æ–≤" in prompt
    assert "–∑–Ω–∞–∫–æ–≤ #" in prompt
    assert "–∫–∞–≤—ã—á–µ–∫" in prompt
    assert "—ç–º–æ–¥–∑–∏" in prompt
    assert "–ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏" in prompt
    assert "—á–∏—Å—Ç—ã–π¬ª —Ç–µ–∫—Å—Ç —Ç–µ–≥–∞" in prompt
