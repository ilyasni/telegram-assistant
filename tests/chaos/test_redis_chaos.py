"""
Redis Chaos Tests
[C7-ID: TEST-REDIS-CHAOS-001]

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å Redis Streams –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Å–±–æ–µ–≤
"""
import asyncio
import json
import time
import pytest
import pytest_asyncio
from redis.asyncio import Redis
from typing import Dict, Any, List


class RedisChaosTester:
    """Redis chaos tester."""
    
    def __init__(self, redis_url: str):
        self.redis_url = redis_url
        self.redis: Redis = None
        self.results: List[Dict[str, Any]] = []
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis."""
        self.redis = Redis.from_url(self.redis_url, decode_responses=True)
        await self.redis.ping()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.redis:
            await self.redis.close()
    
    async def create_test_stream(self, stream_name: str, messages: int = 100):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—Ä–∏–º–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
        print(f"Creating test stream {stream_name} with {messages} messages")
        
        for i in range(messages):
            message = {
                "id": f"test-{i}",
                "data": f"test-data-{i}",
                "timestamp": time.time()
            }
            await self.redis.xadd(stream_name, message, maxlen=10000)
        
        print(f"Created {messages} messages in {stream_name}")
    
    async def create_consumer_group(self, stream_name: str, group_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ consumer group."""
        try:
            await self.redis.xgroup_create(stream_name, group_name, id="0", mkstream=True)
            print(f"Created consumer group {group_name} for {stream_name}")
        except Exception as e:
            if "BUSYGROUP" in str(e):
                print(f"Consumer group {group_name} already exists")
            else:
                raise
    
    async def read_messages(self, stream_name: str, group_name: str, consumer_name: str, count: int = 10):
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ consumer group."""
        try:
            messages = await self.redis.xreadgroup(
                group_name, consumer_name, {stream_name: ">"}, count=count, block=1000
            )
            return messages
        except Exception as e:
            print(f"Error reading messages: {e}")
            return []
    
    async def get_stream_info(self, stream_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∏–º–µ."""
        try:
            info = await self.redis.xinfo_stream(stream_name)
            return info
        except Exception as e:
            print(f"Error getting stream info: {e}")
            return None
    
    async def get_group_info(self, stream_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ consumer groups."""
        try:
            groups = await self.redis.xinfo_groups(stream_name)
            return groups
        except Exception as e:
            print(f"Error getting group info: {e}")
            return []
    
    async def get_pending_info(self, stream_name: str, group_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ pending —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."""
        try:
            pending = await self.redis.xpending(stream_name, group_name)
            return pending
        except Exception as e:
            print(f"Error getting pending info: {e}")
            return None
    
    async def simulate_memory_pressure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è memory pressure."""
        print("üíæ Simulating memory pressure...")
        
        # –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è memory pressure
        large_data = "x" * 1024 * 1024  # 1MB
        
        for i in range(10):
            message = {
                "id": f"large-{i}",
                "data": large_data,
                "timestamp": time.time()
            }
            await self.redis.xadd("stream:memory:pressure", message)
        
        print("‚úÖ Memory pressure simulated")
    
    async def simulate_connection_pool_exhaustion(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è connection pool."""
        print("üîå Simulating connection pool exhaustion...")
        
        # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        connections = []
        for i in range(100):
            conn = Redis.from_url(self.redis_url, decode_responses=True)
            connections.append(conn)
            await conn.ping()
        
        print(f"Created {len(connections)} connections")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for conn in connections:
            await conn.close()
        
        print("‚úÖ Connection pool exhaustion simulated")
    
    async def simulate_slow_consumer(self, stream_name: str, group_name: str, consumer_name: str):
        """–°–∏–º—É–ª—è—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ consumer."""
        print("üêå Simulating slow consumer...")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ ACK'–∞–µ–º –∏—Ö
        messages = await self.read_messages(stream_name, group_name, consumer_name, count=5)
        
        if messages:
            print(f"Read {len(messages)} messages without ACK")
            # –ù–µ ACK'–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ pending
        
        print("‚úÖ Slow consumer simulated")
    
    async def simulate_consumer_crash(self, stream_name: str, group_name: str, consumer_name: str):
        """–°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∞—à–∞ consumer."""
        print("üí• Simulating consumer crash...")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.read_messages(stream_name, group_name, consumer_name, count=5)
        
        if messages:
            print(f"Consumer crashed with {len(messages)} unprocessed messages")
            # –ù–µ ACK'–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ pending
        
        print("‚úÖ Consumer crash simulated")


class TestRedisChaos:
    """Redis chaos tests."""
    
    @pytest_asyncio.fixture
    async def redis_chaos_tester(self):
        """Redis chaos tester fixture."""
        tester = RedisChaosTester(redis_url="redis://localhost:6379")
        await tester.setup()
        yield tester
        await tester.cleanup()
    
    @pytest.mark.asyncio
    async def test_memory_pressure_handling(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ memory pressure."""
        print("üß™ Testing memory pressure handling")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç—Ä–∏–º
        await redis_chaos_tester.create_test_stream("stream:memory:test", 50)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º memory pressure
        await redis_chaos_tester.simulate_memory_pressure()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∏–º –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        info = await redis_chaos_tester.get_stream_info("stream:memory:test")
        assert info is not None, "Stream –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ memory pressure"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ maxlen —Ä–∞–±–æ—Ç–∞–µ—Ç
        assert info["length"] <= 10000, "Stream –ø—Ä–µ–≤—ã—Å–∏–ª maxlen"
        
        print("‚úÖ Memory pressure handling test passed")
    
    @pytest.mark.asyncio
    async def test_connection_pool_exhaustion(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è connection pool."""
        print("üß™ Testing connection pool exhaustion")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ connection pool
        await redis_chaos_tester.simulate_connection_pool_exhaustion()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Redis –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        await redis_chaos_tester.redis.ping()
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
        await redis_chaos_tester.create_test_stream("stream:connection:test", 10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å
        info = await redis_chaos_tester.get_stream_info("stream:connection:test")
        assert info is not None, "–ù–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º –ø–æ—Å–ª–µ connection pool exhaustion"
        
        print("‚úÖ Connection pool exhaustion test passed")
    
    @pytest.mark.asyncio
    async def test_slow_consumer_recovery(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ consumer."""
        print("üß™ Testing slow consumer recovery")
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∏–º –∏ consumer group
        stream_name = "stream:slow:consumer"
        group_name = "slow-group"
        consumer_name = "slow-consumer"
        
        await redis_chaos_tester.create_test_stream(stream_name, 20)
        await redis_chaos_tester.create_consumer_group(stream_name, group_name)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ consumer
        await redis_chaos_tester.simulate_slow_consumer(stream_name, group_name, consumer_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è
        pending = await redis_chaos_tester.get_pending_info(stream_name, group_name)
        assert pending is not None, "–ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å pending info"
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending
        new_consumer_name = "fast-consumer"
        messages = await redis_chaos_tester.read_messages(stream_name, group_name, new_consumer_name, count=10)
        
        if messages:
            print(f"New consumer read {len(messages)} messages")
            # ACK'–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for stream, msgs in messages:
                for msg_id, fields in msgs:
                    await redis_chaos_tester.redis.xack(stream_name, group_name, msg_id)
        
        print("‚úÖ Slow consumer recovery test passed")
    
    @pytest.mark.asyncio
    async def test_consumer_crash_recovery(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ consumer."""
        print("üß™ Testing consumer crash recovery")
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∏–º –∏ consumer group
        stream_name = "stream:crash:test"
        group_name = "crash-group"
        consumer_name = "crash-consumer"
        
        await redis_chaos_tester.create_test_stream(stream_name, 15)
        await redis_chaos_tester.create_consumer_group(stream_name, group_name)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∞—à consumer
        await redis_chaos_tester.simulate_consumer_crash(stream_name, group_name, consumer_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è
        pending = await redis_chaos_tester.get_pending_info(stream_name, group_name)
        assert pending is not None, "–ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å pending info"
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending
        new_consumer_name = "recovery-consumer"
        messages = await redis_chaos_tester.read_messages(stream_name, group_name, new_consumer_name, count=10)
        
        if messages:
            print(f"Recovery consumer read {len(messages)} messages")
            # ACK'–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for stream, msgs in messages:
                for msg_id, fields in msgs:
                    await redis_chaos_tester.redis.xack(stream_name, group_name, msg_id)
        
        print("‚úÖ Consumer crash recovery test passed")
    
    @pytest.mark.asyncio
    async def test_stream_overflow_handling(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞."""
        print("üß™ Testing stream overflow handling")
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∏–º —Å –º–∞–ª–µ–Ω—å–∫–∏–º maxlen
        stream_name = "stream:overflow:test"
        
        # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
        for i in range(15000):  # –ë–æ–ª—å—à–µ —á–µ–º maxlen=10000
            message = {
                "id": f"overflow-{i}",
                "data": f"overflow-data-{i}",
                "timestamp": time.time()
            }
            await redis_chaos_tester.redis.xadd(stream_name, message, maxlen=10000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ maxlen —Ä–∞–±–æ—Ç–∞–µ—Ç
        info = await redis_chaos_tester.get_stream_info(stream_name)
        assert info is not None, "Stream –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è"
        assert info["length"] <= 10000, "Stream –ø—Ä–µ–≤—ã—Å–∏–ª maxlen"
        
        print("‚úÖ Stream overflow handling test passed")
    
    @pytest.mark.asyncio
    async def test_consumer_group_consistency(self, redis_chaos_tester):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ consumer group."""
        print("üß™ Testing consumer group consistency")
        
        # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–∏–º –∏ consumer group
        stream_name = "stream:consistency:test"
        group_name = "consistency-group"
        
        await redis_chaos_tester.create_test_stream(stream_name, 30)
        await redis_chaos_tester.create_consumer_group(stream_name, group_name)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ consumer'–æ–≤
        consumers = ["consumer-1", "consumer-2", "consumer-3"]
        
        for consumer in consumers:
            messages = await redis_chaos_tester.read_messages(stream_name, group_name, consumer, count=5)
            if messages:
                # ACK'–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for stream, msgs in messages:
                    for msg_id, fields in msgs:
                        await redis_chaos_tester.redis.xack(stream_name, group_name, msg_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        groups = await redis_chaos_tester.get_group_info(stream_name)
        assert len(groups) > 0, "Consumer group –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        pending = await redis_chaos_tester.get_pending_info(stream_name, group_name)
        assert pending is not None, "–ù–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å pending info"
        
        print("‚úÖ Consumer group consistency test passed")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
