"""
Database Chaos Tests
[C7-ID: TEST-DB-CHAOS-001]

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å Supabase/PostgreSQL –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–∏–ø–∞–º —Å–±–æ–µ–≤
"""
import asyncio
import json
import time
import pytest
import pytest_asyncio
import asyncpg
from typing import Dict, Any, List, Optional


class DatabaseChaosTester:
    """Database chaos tester."""
    
    def __init__(self, database_url: str):
        self.database_url = database_url
        self.db_pool: Optional[asyncpg.Pool] = None
        self.results: List[Dict[str, Any]] = []
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        self.db_pool = await asyncpg.create_pool(
            self.database_url,
            min_size=1,
            max_size=10,
            command_timeout=30
        )
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.db_pool:
            await self.db_pool.close()
    
    async def create_test_data(self, count: int = 100):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        print(f"Creating {count} test records")
        
        async with self.db_pool.acquire() as conn:
            for i in range(count):
                await conn.execute(
                    """
                    INSERT INTO posts (id, channel_id, message_id, text, created_at)
                    VALUES ($1, $2, $3, $4, $5)
                    ON CONFLICT (id) DO NOTHING
                    """,
                    f"chaos-test-{i}",
                    "chaos-channel",
                    i,
                    f"Chaos test message {i}",
                    time.time()
                )
        
        print(f"Created {count} test records")
    
    async def create_enrichment_data(self, post_id: str, count: int = 10):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±–æ–≥–∞—â–µ–Ω–∏—è."""
        print(f"Creating {count} enrichment records for {post_id}")
        
        async with self.db_pool.acquire() as conn:
            for i in range(count):
                await conn.execute(
                    """
                    INSERT INTO post_enrichment (post_id, kind, data, created_at)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (post_id, kind) DO UPDATE SET
                        data = EXCLUDED.data,
                        updated_at = EXCLUDED.updated_at
                    """,
                    post_id,
                    f"chaos-kind-{i}",
                    json.dumps({"test": f"chaos-data-{i}"}),
                    time.time()
                )
        
        print(f"Created {count} enrichment records")
    
    async def simulate_connection_pool_exhaustion(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è connection pool."""
        print("üîå Simulating connection pool exhaustion...")
        
        # –°–æ–∑–¥–∞—ë–º –º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        connections = []
        for i in range(50):
            conn = await asyncpg.connect(self.database_url)
            connections.append(conn)
            await conn.fetchval("SELECT 1")
        
        print(f"Created {len(connections)} connections")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for conn in connections:
            await conn.close()
        
        print("‚úÖ Connection pool exhaustion simulated")
    
    async def simulate_long_running_query(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–æ–ª–≥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        print("‚è≥ Simulating long running query...")
        
        async with self.db_pool.acquire() as conn:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å
            await conn.execute("SELECT pg_sleep(5)")
        
        print("‚úÖ Long running query completed")
    
    async def simulate_deadlock(self):
        """–°–∏–º—É–ª—è—Ü–∏—è deadlock."""
        print("üîí Simulating deadlock...")
        
        async def transaction_1():
            async with self.db_pool.acquire() as conn:
                async with conn.transaction():
                    await conn.execute("UPDATE posts SET text = 'tx1' WHERE id = 'chaos-test-1'")
                    await asyncio.sleep(1)
                    await conn.execute("UPDATE posts SET text = 'tx1' WHERE id = 'chaos-test-2'")
        
        async def transaction_2():
            async with self.db_pool.acquire() as conn:
                async with conn.transaction():
                    await conn.execute("UPDATE posts SET text = 'tx2' WHERE id = 'chaos-test-2'")
                    await asyncio.sleep(1)
                    await conn.execute("UPDATE posts SET text = 'tx2' WHERE id = 'chaos-test-1'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        try:
            await asyncio.gather(transaction_1(), transaction_2())
        except Exception as e:
            print(f"Deadlock detected: {e}")
        
        print("‚úÖ Deadlock simulation completed")
    
    async def simulate_lock_timeout(self):
        """–°–∏–º—É–ª—è—Ü–∏—è lock timeout."""
        print("‚è∞ Simulating lock timeout...")
        
        async with self.db_pool.acquire() as conn:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π lock timeout
            await conn.execute("SET lock_timeout = '1s'")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
                await conn.execute("LOCK TABLE posts IN EXCLUSIVE MODE")
            except Exception as e:
                print(f"Lock timeout: {e}")
        
        print("‚úÖ Lock timeout simulation completed")
    
    async def simulate_memory_pressure(self):
        """–°–∏–º—É–ª—è—Ü–∏—è memory pressure."""
        print("üíæ Simulating memory pressure...")
        
        # –°–æ–∑–¥–∞—ë–º –±–æ–ª—å—à–∏–µ –∑–∞–ø–∏—Å–∏
        large_data = "x" * 1024 * 1024  # 1MB
        
        async with self.db_pool.acquire() as conn:
            for i in range(10):
                await conn.execute(
                    """
                    INSERT INTO post_enrichment (post_id, kind, data, created_at)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (post_id, kind) DO UPDATE SET
                        data = EXCLUDED.data,
                        updated_at = EXCLUDED.updated_at
                    """,
                    f"memory-pressure-{i}",
                    "large-data",
                    json.dumps({"large_data": large_data}),
                    time.time()
                )
        
        print("‚úÖ Memory pressure simulated")
    
    async def check_data_consistency(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            async with self.db_pool.acquire() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                count = await conn.fetchval("SELECT COUNT(*) FROM posts WHERE channel_id = 'chaos-channel'")
                print(f"Found {count} chaos test records")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å enrichment –¥–∞–Ω–Ω—ã–µ
                enrichment_count = await conn.fetchval("SELECT COUNT(*) FROM post_enrichment WHERE post_id LIKE 'chaos-test-%'")
                print(f"Found {enrichment_count} enrichment records")
                
                return count > 0 and enrichment_count > 0
        except Exception as e:
            print(f"Data consistency check failed: {e}")
            return False
    
    async def get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î."""
        try:
            async with self.db_pool.acquire() as conn:
                stats = {}
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                stats["connections"] = await conn.fetchval("SELECT COUNT(*) FROM pg_stat_activity")
                
                # –†–∞–∑–º–µ—Ä –ë–î
                stats["db_size"] = await conn.fetchval("SELECT pg_size_pretty(pg_database_size(current_database()))")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
                stats["posts_count"] = await conn.fetchval("SELECT COUNT(*) FROM posts")
                stats["enrichment_count"] = await conn.fetchval("SELECT COUNT(*) FROM post_enrichment")
                
                return stats
        except Exception as e:
            print(f"Error getting database stats: {e}")
            return {}


class TestDatabaseChaos:
    """Database chaos tests."""
    
    @pytest_asyncio.fixture
    async def db_chaos_tester(self):
        """Database chaos tester fixture."""
        tester = DatabaseChaosTester(
            database_url="postgresql://postgres:password@localhost:5432/telegram_assistant"
        )
        await tester.setup()
        yield tester
        await tester.cleanup()
    
    @pytest.mark.asyncio
    async def test_connection_pool_exhaustion(self, db_chaos_tester):
        """–¢–µ—Å—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è connection pool."""
        print("üß™ Testing connection pool exhaustion")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(50)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ connection pool
        await db_chaos_tester.simulate_connection_pool_exhaustion()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è connection pool"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db_chaos_tester.get_database_stats()
        assert stats["posts_count"] > 0, "–ù–µ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ connection pool exhaustion"
        
        print("‚úÖ Connection pool exhaustion test passed")
    
    @pytest.mark.asyncio
    async def test_long_running_query_handling(self, db_chaos_tester):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        print("üß™ Testing long running query handling")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(100)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å
        start_time = time.time()
        await db_chaos_tester.simulate_long_running_query()
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
        assert end_time - start_time >= 5, "–î–æ–ª–≥–∏–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"
        
        print("‚úÖ Long running query handling test passed")
    
    @pytest.mark.asyncio
    async def test_deadlock_recovery(self, db_chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ deadlock."""
        print("üß™ Testing deadlock recovery")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(10)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º deadlock
        await db_chaos_tester.simulate_deadlock()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ deadlock"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_enrichment_data("chaos-test-1", 5)
        
        print("‚úÖ Deadlock recovery test passed")
    
    @pytest.mark.asyncio
    async def test_lock_timeout_handling(self, db_chaos_tester):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ lock timeout."""
        print("üß™ Testing lock timeout handling")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(20)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º lock timeout
        await db_chaos_tester.simulate_lock_timeout()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ lock timeout"
        
        print("‚úÖ Lock timeout handling test passed")
    
    @pytest.mark.asyncio
    async def test_memory_pressure_handling(self, db_chaos_tester):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ memory pressure."""
        print("üß™ Testing memory pressure handling")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(30)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º memory pressure
        await db_chaos_tester.simulate_memory_pressure()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ memory pressure"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await db_chaos_tester.get_database_stats()
        assert stats["enrichment_count"] > 0, "–ù–µ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å enrichment –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ memory pressure"
        
        print("‚úÖ Memory pressure handling test passed")
    
    @pytest.mark.asyncio
    async def test_concurrent_transactions(self, db_chaos_tester):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
        print("üß™ Testing concurrent transactions")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(50)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        async def concurrent_transaction(transaction_id: int):
            async with db_chaos_tester.db_pool.acquire() as conn:
                async with conn.transaction():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    for i in range(5):
                        post_id = f"chaos-test-{transaction_id * 5 + i}"
                        await conn.execute(
                            "UPDATE posts SET text = $1 WHERE id = $2",
                            f"concurrent-tx-{transaction_id}",
                            post_id
                        )
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 5 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await asyncio.gather(*[concurrent_transaction(i) for i in range(5)])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
        
        print("‚úÖ Concurrent transactions test passed")
    
    @pytest.mark.asyncio
    async def test_rollback_recovery(self, db_chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ rollback."""
        print("üß™ Testing rollback recovery")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await db_chaos_tester.create_test_data(25)
        
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å rollback
        async with db_chaos_tester.db_pool.acquire() as conn:
            try:
                async with conn.transaction():
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    await conn.execute(
                        "INSERT INTO posts (id, channel_id, message_id, text, created_at) VALUES ($1, $2, $3, $4, $5)",
                        "rollback-test",
                        "rollback-channel",
                        999,
                        "This should be rolled back",
                        time.time()
                    )
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º rollback
                    raise Exception("Forced rollback")
            except Exception as e:
                print(f"Rollback occurred: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã
        async with db_chaos_tester.db_pool.acquire() as conn:
            count = await conn.fetchval("SELECT COUNT(*) FROM posts WHERE id = 'rollback-test'")
            assert count == 0, "–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–∞—á–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ë–î –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
        consistent = await db_chaos_tester.check_data_consistency()
        assert consistent, "–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ rollback"
        
        print("‚úÖ Rollback recovery test passed")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
