"""
Chaos tests –¥–ª—è Crawl Pipeline
[C7-ID: TEST-CRAWL-CHAOS-001]

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Å–±–æ—è–º: Redis/Supabase restart, network partition, OOM
"""
import asyncio
import json
import time
import subprocess
import pytest
import pytest_asyncio
from redis.asyncio import Redis
import asyncpg
from typing import Dict, Any, List


class ChaosTester:
    """Chaos tester –¥–ª—è crawl pipeline."""
    
    def __init__(self, redis_url: str, database_url: str):
        self.redis_url = redis_url
        self.database_url = database_url
        self.redis: Redis = None
        self.db_pool = None
        self.results: List[Dict[str, Any]] = []
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        self.redis = Redis.from_url(self.redis_url, decode_responses=True)
        self.db_pool = await asyncpg.create_pool(self.database_url)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.redis:
            await self.redis.close()
        if self.db_pool:
            await self.db_pool.close()
    
    async def send_test_message(self, post_id: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        message = {
            "post_id": post_id,
            "tags": ["longread", "chaos-test"],
            "urls": [f"https://example.com/chaos/{post_id}"],
            "text": "Chaos test message with enough words to pass policy " * 10,
            "trace_id": f"chaos-trace-{post_id}",
            "metadata": {"chaos_test": True}
        }
        
        msg_id = await self.redis.xadd(
            "stream:posts:tagged",
            {"data": json.dumps(message)},
            maxlen=10000
        )
        return msg_id
    
    async def check_message_processed(self, post_id: str, timeout: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                async with self.db_pool.acquire() as conn:
                    result = await conn.fetchrow(
                        "SELECT * FROM post_enrichment WHERE post_id = $1 AND kind = 'crawl'",
                        post_id
                    )
                    if result:
                        return True
            except Exception as e:
                print(f"Error checking message processing: {e}")
            
            await asyncio.sleep(0.5)
        
        return False
    
    async def get_queue_depth(self, stream: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –æ—á–µ—Ä–µ–¥–∏."""
        try:
            return await self.redis.xlen(stream)
        except:
            return -1
    
    async def restart_redis(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Redis (—Å–∏–º—É–ª—è—Ü–∏—è)."""
        print("üîÑ Restarting Redis...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª docker-compose restart redis
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º
        await asyncio.sleep(2)
        print("‚úÖ Redis restarted")
    
    async def restart_supabase(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Supabase (—Å–∏–º—É–ª—è—Ü–∏—è)."""
        print("üîÑ Restarting Supabase...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª docker-compose restart supabase-db
        await asyncio.sleep(3)
        print("‚úÖ Supabase restarted")
    
    async def simulate_network_partition(self, duration: int = 10):
        """–°–∏–º—É–ª—è—Ü–∏—è network partition —Å tc netem."""
        print(f"üåê Simulating network partition for {duration}s...")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∏ –∫–æ–º–∞–Ω–¥—ã tc netem:
        # tc qdisc add dev eth0 root netem delay 1000ms loss 10%
        # await asyncio.sleep(duration)
        # tc qdisc del dev eth0 root
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º
        await asyncio.sleep(duration)
        print("‚úÖ Network partition ended")
    
    async def simulate_oom_kill(self):
        """–°–∏–º—É–ª—è—Ü–∏—è OOM kill."""
        print("üí• Simulating OOM kill...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª docker kill --signal=9 container
        await asyncio.sleep(1)
        print("‚úÖ OOM kill simulated")


class TestCrawlResilience:
    """Chaos tests –¥–ª—è crawl pipeline."""
    
    @pytest_asyncio.fixture
    async def chaos_tester(self):
        """Chaos tester fixture."""
        tester = ChaosTester(
            redis_url="redis://localhost:6379",
            database_url="postgresql://postgres:password@localhost:5432/telegram_assistant"
        )
        await tester.setup()
        yield tester
        await tester.cleanup()
    
    @pytest.mark.asyncio
    async def test_redis_restart_recovery(self, chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Redis."""
        print("üß™ Testing Redis restart recovery")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        msg_id = await chaos_tester.send_test_message("redis-restart-test")
        print(f"Sent message: {msg_id}")
        
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Redis
        await chaos_tester.restart_redis()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        msg_id_2 = await chaos_tester.send_test_message("redis-restart-test-2")
        print(f"Sent message after restart: {msg_id_2}")
        
        # –ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
        queue_depth = await chaos_tester.get_queue_depth("stream:posts:tagged")
        print(f"Queue depth after restart: {queue_depth}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        processed = await chaos_tester.check_message_processed("redis-restart-test-2", timeout=30)
        
        assert processed, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Redis"
        assert queue_depth >= 0, "Redis –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
        
        print("‚úÖ Redis restart recovery test passed")
    
    @pytest.mark.asyncio
    async def test_supabase_restart_recovery(self, chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Supabase."""
        print("üß™ Testing Supabase restart recovery")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id = await chaos_tester.send_test_message("supabase-restart-test")
        print(f"Sent message: {msg_id}")
        
        # –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Supabase
        await chaos_tester.restart_supabase()
        
        # –ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id_2 = await chaos_tester.send_test_message("supabase-restart-test-2")
        print(f"Sent message after restart: {msg_id_2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        processed = await chaos_tester.check_message_processed("supabase-restart-test-2", timeout=30)
        
        assert processed, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Supabase"
        
        print("‚úÖ Supabase restart recovery test passed")
    
    @pytest.mark.asyncio
    async def test_network_partition_resilience(self, chaos_tester):
        """–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ network partition."""
        print("üß™ Testing network partition resilience")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ partition
        msg_ids = []
        for i in range(5):
            msg_id = await chaos_tester.send_test_message(f"network-partition-{i}")
            msg_ids.append(msg_id)
        
        print(f"Sent {len(msg_ids)} messages before partition")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º network partition
        await chaos_tester.simulate_network_partition(duration=10)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ partition
        msg_id_after = await chaos_tester.send_test_message("network-partition-after")
        print(f"Sent message after partition: {msg_id_after}")
        
        # –ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å
        queue_depth = await chaos_tester.get_queue_depth("stream:posts:tagged")
        print(f"Queue depth after partition: {queue_depth}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        processed = await chaos_tester.check_message_processed("network-partition-after", timeout=30)
        
        assert processed, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ network partition"
        assert queue_depth >= 0, "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ network partition"
        
        print("‚úÖ Network partition resilience test passed")
    
    @pytest.mark.asyncio
    async def test_oom_kill_recovery(self, chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ OOM kill."""
        print("üß™ Testing OOM kill recovery")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id = await chaos_tester.send_test_message("oom-kill-test")
        print(f"Sent message: {msg_id}")
        
        # –ñ–¥—ë–º –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º OOM kill
        await chaos_tester.simulate_oom_kill()
        
        # –ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è)
        await asyncio.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id_2 = await chaos_tester.send_test_message("oom-kill-test-2")
        print(f"Sent message after OOM: {msg_id_2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        processed = await chaos_tester.check_message_processed("oom-kill-test-2", timeout=30)
        
        assert processed, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å–ª–µ OOM kill"
        
        print("‚úÖ OOM kill recovery test passed")
    
    @pytest.mark.asyncio
    async def test_consumer_group_recovery(self, chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è consumer group –ø–æ—Å–ª–µ —Å–±–æ—è."""
        print("üß™ Testing consumer group recovery")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_ids = []
        for i in range(10):
            msg_id = await chaos_tester.send_test_message(f"consumer-group-{i}")
            msg_ids.append(msg_id)
        
        print(f"Sent {len(msg_ids)} messages")
        
        # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ consumer group —Ä–∞–±–æ—Ç–∞–µ—Ç
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ XINFO GROUPS
            queue_depth = await chaos_tester.get_queue_depth("stream:posts:tagged")
            print(f"Queue depth: {queue_depth}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            processed = await chaos_tester.check_message_processed("consumer-group-5", timeout=20)
            
            assert processed, "Consumer group –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è"
            
        except Exception as e:
            pytest.fail(f"Consumer group recovery failed: {e}")
        
        print("‚úÖ Consumer group recovery test passed")
    
    @pytest.mark.asyncio
    async def test_cascade_failure_recovery(self, chaos_tester):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —Å–±–æ—è."""
        print("üß™ Testing cascade failure recovery")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_id = await chaos_tester.send_test_message("cascade-failure-test")
        print(f"Sent message: {msg_id}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞—Å–∫–∞–¥–Ω—ã–π —Å–±–æ–π: Redis + Supabase
        print("üí• Simulating cascade failure...")
        await chaos_tester.restart_redis()
        await chaos_tester.restart_supabase()
        
        # –ñ–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await asyncio.sleep(10)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_id_2 = await chaos_tester.send_test_message("cascade-failure-test-2")
        print(f"Sent message after cascade failure: {msg_id_2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        queue_depth = await chaos_tester.get_queue_depth("stream:posts:tagged")
        processed = await chaos_tester.check_message_processed("cascade-failure-test-2", timeout=30)
        
        assert processed, "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —Å–±–æ—è"
        assert queue_depth >= 0, "–û—á–µ—Ä–µ–¥–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –ø–æ—Å–ª–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —Å–±–æ—è"
        
        print("‚úÖ Cascade failure recovery test passed")


@pytest.mark.asyncio
async def test_chaos_test_runner():
    """–ì–ª–∞–≤–Ω—ã–π chaos test runner."""
    print("üé≠ Chaos test runner - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ chaos testing
    # —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –≤ Docker
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö chaos —Ç–µ—Å—Ç–æ–≤
    # —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Å–±–æ–µ–≤
    
    assert True  # Placeholder


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
