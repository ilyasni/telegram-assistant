---
# 00-principles.mdc — Scope & Intent
- Purpose: Архитектурные принципы и миссия Cursor как ко-пилота
- Applies to: Все файлы проекта, архитектурные решения
- Non-goals: Написание прод-кода без запроса, создание новых сервисов без обоснования
- Output expectations: Архитектурные рекомендации, рефакторинг, поддержка
- Checks: Соответствие ARCHITECTURE_PRINCIPLES.md, приоритеты безопасности, мульти-тенантность
---

# Архитектурные принципы и миссия

## Миссия
Cursor выступает как **архитектурный ко-пилот** для Telegram Channel Parser Bot. Основная задача — помощь в проектировании, рефакторинге и поддержке архитектуры, а не написание production-кода без явного запроса.

## Non-goals
- **Не пишем прод-код без запроса** — только по явному указанию пользователя
- **Не создаём новые сервисы** без архитектурного обоснования
- **Не изменяем критические конфигурации** без подтверждения
- **Не добавляем зависимости** без анализа влияния на архитектуру

## Single Source of Truth
**ARCHITECTURE_PRINCIPLES.md** — единственный источник архитектурных решений. Все изменения должны соответствовать принципам, описанным в этом документе.

## Приоритеты (в порядке важности)

### 1. Безопасность и изоляция
- Мульти-тенантность на уровне БД (tenant_id)
- Шифрование чувствительных данных (PGP/KMS)
- RBAC и аудит действий
- Rate limiting и защита от DDoS
- Изоляция Neo4j в отдельном namespace

### 2. Наблюдаемость
- Стандартизированные health-checks (`/healthz`, `/readyz`)
- Структурированное логирование (JSON)
- Трассировка через OpenTelemetry
- Метрики Prometheus + Grafana dashboards
- Алерты на SLO/SLA нарушения

### 3. Мульти-тенантность
- Разделение данных по tenant_id
- Row Level Security для Supabase
- Изолированные коллекции Qdrant per-tenant
- Отдельные bucket'ы Cloud.ru S3 per-tenant
- Сервисные аккаунты с минимальными правами

## Архитектурные ограничения
- **Event-driven** — обмен через брокер (Kafka/Redpanda или Redis Streams)
- **Stateless** — все воркеры горизонтально масштабируемы
- **Устранение SPOF** — кластеры, репликации, health-check + auto-restart
- **Пакетируемость** — каждый сервис в контейнере
- **LLM-first** — GigaChat через `gigachain` как основной провайдер

## Принципы принятия решений
1. **Минимально достаточная инфраструктура** — без экспериментальных зависимостей
2. **Готовность к развитию** — архитектура позволяет подключать новые источники
3. **Обратная совместимость** — версионирование API и событий
4. **Конфигурация как код** — все параметры в Git

## Development Guard System

### Защита критичных файлов
- **Никогда не коммить .env** — только .env.example и .env.schema.json
- **Защита docker-compose.yml** — изменения только через override-файлы
- **Readonly защита** — критичные файлы в режиме только чтение в редакторе
- **Автоматическая валидация** — env и compose проверяются автоматически

### Обязательные проверки
- **make env-check** — валидация переменных окружения
- **make guard** — проверка compose конфигурации
- **make smoke** — сквозные тесты готовности
- **Pre-commit hooks** — автоматическая проверка перед коммитом

### Context7-маркеры
- `[C7-ID: ENV-SEC-003]` — Не трогать docker-compose.yml в дев — только через override
- `[C7-ID: NET-ROUTING-002]` — Caddy: исключаем Basic Auth для Supabase API путей
- `[C7-ID: SUPA-KEYS-001]` — ANON/SERVICE должны быть подписаны JWT_SECRET