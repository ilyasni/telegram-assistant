{
    # Global options
    log {
        output file /var/log/caddy/access.log
        format json
    }
}

# Snippet для общих proxy headers
(api_upstream) {
    header_up X-Real-IP {remote_host}
    header_up X-Forwarded-For {remote_host}
    header_up X-Forwarded-Proto {scheme}
}

# API subdomain
api.produman.studio {
    # TLS с явным email для Let's Encrypt (HTTP challenge)
    tls {$CADDY_TLS_EMAIL}
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        -Server
    }
    
    # Health endpoints
    handle /health* {
        reverse_proxy api:8000 {
            import api_upstream
        }
    }
    
    # API endpoints
    handle /api/* {
        reverse_proxy api:8000 {
            import api_upstream
        }
    }
    
    # Metrics endpoint - ЗАЩИЩЁН (только из внутренней сети Docker)
    @metrics path /metrics
    handle @metrics {
        # Вариант A: только из Docker network (без external exposure)
        reverse_proxy api:8000 {
            import api_upstream
        }
        # Вариант B: если нужен доступ снаружи - раскомментировать basic auth
        # basicauth {
        #     prometheus {$PROM_BASICAUTH_HASH}
        # }
    }
    
    # Default
    handle {
        respond "Telegram Assistant API" 200
    }
}

# Supabase Studio subdomain
supabase.produman.studio {
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://telegram.org; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' wss: https: ws:; frame-src 'self' https:;"
        -Server
    }

    # API пути: НЕТ basic auth, просто проксируем к Kong
    @supabase_api path /rest/* /auth/* /storage/* /realtime/* /functions/* /graphql/* /api/platform/*
    handle @supabase_api {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
            header_up X-Forwarded-Host {http.request.host}
        }
    }

    # Всё остальное (UI) — с basic auth
    handle {
        # Basic Authentication только для UI
        basicauth {
            admin $2a$14$krN0RYZgrrj.YXS5KSSad.jxZLeQFaMIEVAprVjOI4v8t4cIGJOsK
        }
        
        # Supabase Studio через Kong
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
            header_up X-Forwarded-Host {http.request.host}
        }
    }
}

# Main domain
produman.studio {
    # Security headers
    header {
        # Enable HSTS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        # Prevent MIME type sniffing
        X-Content-Type-Options "nosniff"
        # Prevent clickjacking
        X-Frame-Options "DENY"
        # XSS Protection
        X-XSS-Protection "1; mode=block"
        # Content Security Policy
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://telegram.org; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' wss: https: ws:; frame-src 'self' https:;"
        # Remove server info
        -Server
    }

    # Health check endpoint
    handle /health {
        respond "OK" 200
    }


    # Supabase API endpoints через Kong
    handle /rest/v1/* {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    handle /auth/v1/* {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    handle /realtime/v1/* {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    handle /storage/v1/* {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    # (Edge Functions disabled)

    handle /pg/* {
        reverse_proxy kong:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    # Mini App - статические файлы
    handle /tg/miniapp* {
        root * /var/www/webapp
        try_files {path} /index.html
        file_server
    }

    # API endpoints
    handle /health* {
        reverse_proxy api:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    handle /api/* {
        reverse_proxy api:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    # Telegram bot webhook - точное правило без переписывания пути
    handle /tg/bot/* {
        reverse_proxy api:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    # Telegram QR auth endpoints
    handle /tg/qr/* {
        reverse_proxy api:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
    }

    # Telegram Mini App
    handle /tg/app/* {
        reverse_proxy api:8000 {
            header_up Host {http.request.host}
            header_up X-Real-IP {http.request.remote}
            header_up X-Forwarded-For {http.request.remote}
            header_up X-Forwarded-Proto {http.request.scheme}
        }
        # Context7 best practice: cache-busting для Mini App
        header Cache-Control "no-cache, no-store, must-revalidate"
        header Pragma "no-cache"
        header Expires "0"
    }

    # Default route
    handle {
        respond "Telegram Assistant API" 200
    }
}

# Grafana subdomain (external)
grafana.produman.studio {
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        -Server
    }
    # Ensure no path stripping and absolute root
    reverse_proxy grafana:3000 {
        header_up Host {http.request.host}
        header_up X-Real-IP {http.request.remote}
        header_up X-Forwarded-For {http.request.remote}
        header_up X-Forwarded-Proto {http.request.scheme}
        header_up X-Forwarded-Host {http.request.host}
    }
}