#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana:
1. –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è uid –≤ datasource
2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
"""

import json
import os
import sys
from pathlib import Path

DASHBOARDS_DIR = Path("/opt/telegram-assistant/grafana/dashboards")

def fix_datasource_uid(obj):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è uid –≤ datasource"""
    if isinstance(obj, dict):
        if 'datasource' in obj and isinstance(obj['datasource'], dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è uid
            if 'uid' in obj['datasource']:
                uid_value = obj['datasource']['uid']
                ds_type = obj['datasource'].get('type', 'prometheus')
                # –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç datasource
                obj['datasource'] = {
                    'type': ds_type,
                    'uid': uid_value
                }
                # –î–æ–±–∞–≤–ª—è–µ–º name –µ—Å–ª–∏ —ç—Ç–æ Prometheus
                if ds_type == 'prometheus' and uid_value == 'prometheus':
                    obj['datasource']['name'] = 'Prometheus'
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in obj.items():
            fix_datasource_uid(value)
    elif isinstance(obj, list):
        for item in obj:
            fix_datasource_uid(item)

def check_metric_exists(metric_name, available_metrics):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
    base_metric = metric_name.split('{')[0].split('[')[0].strip()
    return base_metric in available_metrics

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    available_metrics = set()
    metrics_file = "/tmp/available_metrics.txt"
    if os.path.exists(metrics_file):
        with open(metrics_file, 'r') as f:
            available_metrics = set(line.strip() for line in f if line.strip())
    
    fixed_count = 0
    errors = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∞—à–±–æ—Ä–¥
    for dashboard_file in DASHBOARDS_DIR.glob("*.json"):
        if ".bak" in dashboard_file.name:
            continue
        
        try:
            with open(dashboard_file, 'r', encoding='utf-8') as f:
                dashboard = json.load(f)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è uid
            fix_datasource_uid(dashboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if available_metrics:
                for panel in dashboard.get('panels', []):
                    for target in panel.get('targets', []):
                        expr = target.get('expr', '')
                        if expr:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –º–µ—Ç—Ä–∏–∫–∏
                            import re
                            metrics_in_expr = re.findall(r'([a-zA-Z_][a-zA-Z0-9_]*)\s*\{?', expr)
                            for metric in metrics_in_expr:
                                if metric not in ['sum', 'rate', 'increase', 'histogram_quantile', 'by', 'le', 'and', 'or', 'up']:
                                    if not check_metric_exists(metric, available_metrics):
                                        errors.append(f"{dashboard_file.name}: –º–µ—Ç—Ä–∏–∫–∞ '{metric}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ '{expr}'")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
            with open(dashboard_file, 'w', encoding='utf-8') as f:
                json.dump(dashboard, f, indent=2, ensure_ascii=False)
            
            fixed_count += 1
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {dashboard_file.name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {dashboard_file.name}: {e}", file=sys.stderr)
    
    print(f"\nüìä –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞—à–±–æ—Ä–¥–æ–≤: {fixed_count}")
    
    if errors:
        print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–º–µ—Ç—Ä–∏–∫–∏ –º–æ–≥—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å):")
        for error in errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  - {error}")
        if len(errors) > 10:
            print(f"  ... –∏ –µ—â—ë {len(errors) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

if __name__ == '__main__':
    main()

