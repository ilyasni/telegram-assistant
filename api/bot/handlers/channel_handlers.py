"""
Telegram Bot Handlers –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /add_channel, /my_channels —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSM –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ Context7 best practices
"""

import asyncio
import logging
import re
from typing import Optional, Dict, Any
from datetime import datetime, timezone

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import httpx

logger = logging.getLogger(__name__)

# ============================================================================
# FSM STATES
# ============================================================================

class ChannelStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏."""
    waiting_username = State()
    waiting_telegram_id = State()
    waiting_confirmation = State()

# ============================================================================
# ROUTER SETUP
# ============================================================================

router = Router()

# ============================================================================
# API CLIENT
# ============================================================================

class ChannelAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Channel Management API."""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.client = httpx.AsyncClient(timeout=30.0)
    
    async def subscribe_to_channel(
        self, 
        user_id: str, 
        username: Optional[str] = None,
        telegram_id: Optional[int] = None,
        title: Optional[str] = None
    ) -> Dict[str, Any]:
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ API."""
        try:
            payload = {}
            if username:
                payload["username"] = username
            if telegram_id:
                payload["telegram_id"] = telegram_id
            if title:
                payload["title"] = title
            
            response = await self.client.post(
                f"{self.base_url}/api/channels/users/{user_id}/subscribe",
                json=payload
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": response.text}
                
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_user_channels(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            response = await self.client.get(
                f"{self.base_url}/api/channels/users/{user_id}/list"
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": response.text}
                
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def unsubscribe_from_channel(self, user_id: str, channel_id: str) -> Dict[str, Any]:
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞."""
        try:
            response = await self.client.delete(
                f"{self.base_url}/api/channels/users/{user_id}/unsubscribe/{channel_id}"
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": response.text}
                
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_subscription_stats(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
        try:
            response = await self.client.get(
                f"{self.base_url}/api/channels/users/{user_id}/stats"
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": response.text}
                
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def trigger_parsing(self, user_id: str, channel_id: str) -> Dict[str, Any]:
        """–¢—Ä–∏–≥–≥–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞."""
        try:
            response = await self.client.post(
                f"{self.base_url}/api/channels/{channel_id}/trigger-parsing",
                json={"user_id": user_id}
            )
            
            if response.status_code == 200:
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "error": response.text}
                
        except Exception as e:
            logger.error(f"API call failed: {e}")
            return {"success": False, "error": str(e)}
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        await self.client.aclose()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
api_client = ChannelAPIClient()

# ============================================================================
# COMMAND HANDLERS
# ============================================================================

@router.message(Command("add_channel"))
async def cmd_add_channel(msg: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if not await _check_user_permissions(msg.from_user.id):
            await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        stats_result = await api_client.get_subscription_stats(str(msg.from_user.id))
        
        if not stats_result["success"]:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        stats = stats_result["data"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not stats.get("can_add_more", True):
            await msg.answer(
                f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫!\n"
                f"–¢–µ–∫—É—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}\n"
                f"–õ–∏–º–∏—Ç: {stats.get('subscription_limit', 0)}\n\n"
                f"üí° –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"
            )
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìù –ü–æ username (@channel_name)",
            callback_data="add_by_username"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üî¢ –ü–æ Telegram ID",
            callback_data="add_by_id"
        ))
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_add"
        ))
        
        await msg.answer(
            f"üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}/{stats.get('subscription_limit', 0)}\n"
            f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('posts_today', 0)}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats.get('total_posts', 0)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_add_channel: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

@router.message(Command("my_channels"))
async def cmd_my_channels(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        channels_result = await api_client.get_user_channels(str(msg.from_user.id))
        
        if not channels_result["success"]:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
            return
        
        channels_data = channels_result["data"]
        channels = channels_data.get("channels", [])
        
        if not channels:
            await msg.answer(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
        text = f"üì¢ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã ({len(channels)})</b>\n\n"
        
        for i, channel in enumerate(channels, 1):
            status_emoji = "‚úÖ" if channel.get("is_active") else "‚è∏Ô∏è"
            username = channel.get("username", "N/A")
            title = channel.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            posts_count = channel.get("posts_count", 0)
            
            text += f"{i}. {status_emoji} <b>@{username}</b>\n"
            text += f"   üìù {title}\n"
            text += f"   üìä –ü–æ—Å—Ç–æ–≤: {posts_count}\n\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data="refresh_channels"
        ))
        keyboard.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            callback_data="add_channel"
        ))
        
        await msg.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in cmd_my_channels: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")

@router.message(Command("channel_stats"))
async def cmd_channel_stats(msg: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_result = await api_client.get_subscription_stats(str(msg.from_user.id))
        
        if not stats_result["success"]:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats = stats_result["data"]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        text += f"üì¢ <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_channels', 0)}\n"
        text += f"‚Ä¢ –õ–∏–º–∏—Ç: {stats.get('subscription_limit', 0)}\n\n"
        text += f"üìù <b>–ü–æ—Å—Ç—ã:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_posts', 0)}\n"
        text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats.get('posts_today', 0)}\n\n"
        
        can_add = stats.get("can_add_more", False)
        if can_add:
            text += "‚úÖ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤"
        else:
            text += "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
        
        await msg.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in cmd_channel_stats: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ============================================================================
# CALLBACK HANDLERS
# ============================================================================

@router.callback_query(F.data == "add_by_username")
async def cb_add_by_username(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ username."""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ username</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name –∏–ª–∏ channel_name)",
        parse_mode="HTML"
    )
    await state.set_state(ChannelStates.waiting_username)
    await callback.answer()

@router.callback_query(F.data == "add_by_id")
async def cb_add_by_id(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ Telegram ID."""
    await callback.message.edit_text(
        "üî¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ Telegram ID</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)",
        parse_mode="HTML"
    )
    await state.set_state(ChannelStates.waiting_telegram_id)
    await callback.answer()

@router.callback_query(F.data == "cancel_add")
async def cb_cancel_add(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "refresh_channels")
async def cb_refresh_channels(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤."""
    await cmd_my_channels(callback.message)
    await callback.answer("üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω")

@router.callback_query(F.data == "add_channel")
async def cb_add_channel(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞."""
    await cmd_add_channel(callback.message, state)
    await callback.answer()

# ============================================================================
# STATE HANDLERS
# ============================================================================

@router.message(ChannelStates.waiting_username)
async def process_username(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞."""
    try:
        username = msg.text.strip().lstrip('@')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è username
        if not _is_valid_username(username):
            await msg.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: @channel_name –∏–ª–∏ channel_name"
            )
            return
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        result = await api_client.subscribe_to_channel(
            user_id=str(msg.from_user.id),
            username=username
        )
        
        if result["success"]:
            channel_data = result["data"]
            await msg.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üì¢ –ö–∞–Ω–∞–ª: @{username}\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data.get('title', 'N/A')}\n\n"
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤...",
                parse_mode="HTML"
            )
            
            # –¢—Ä–∏–≥–≥–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(_trigger_background_parsing(msg.from_user.id, channel_data["id"]))
        else:
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {error_msg}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing username: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ username")
        await state.clear()

@router.message(ChannelStates.waiting_telegram_id)
async def process_telegram_id(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram ID –∫–∞–Ω–∞–ª–∞."""
    try:
        telegram_id_text = msg.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID
        try:
            telegram_id = int(telegram_id_text)
            if telegram_id >= 0:
                await msg.answer("‚ùå Telegram ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
        except ValueError:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID!")
            return
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        result = await api_client.subscribe_to_channel(
            user_id=str(msg.from_user.id),
            telegram_id=telegram_id
        )
        
        if result["success"]:
            channel_data = result["data"]
            await msg.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üî¢ ID: {telegram_id}\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {channel_data.get('title', 'N/A')}\n\n"
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤...",
                parse_mode="HTML"
            )
            
            # –¢—Ä–∏–≥–≥–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(_trigger_background_parsing(msg.from_user.id, channel_data["id"]))
        else:
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {error_msg}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing telegram_id: {e}")
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Telegram ID")
        await state.clear()

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

async def _check_user_permissions(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î –∏–ª–∏ –∫–µ—à–µ
    return True

def _is_valid_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è username –∫–∞–Ω–∞–ª–∞."""
    if not username:
        return False
    
    # Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    if not re.match(r'^[a-zA-Z0-9_]+$', username):
        return False
    
    # –î–ª–∏–Ω–∞ –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
    if len(username) < 5 or len(username) > 32:
        return False
    
    return True

async def _trigger_background_parsing(user_id: int, channel_id: str):
    """–§–æ–Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞."""
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        await asyncio.sleep(2)
        
        result = await api_client.trigger_parsing(str(user_id), channel_id)
        
        if result["success"]:
            logger.info(f"Background parsing triggered for user {user_id}, channel {channel_id}")
        else:
            logger.warning(f"Failed to trigger background parsing: {result.get('error')}")
            
    except Exception as e:
        logger.error(f"Error in background parsing trigger: {e}")

# ============================================================================
# ERROR HANDLERS
# ============================================================================

@router.message()
async def handle_unknown_message(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    current_state = await state.get_state()
    
    if current_state in [ChannelStates.waiting_username, ChannelStates.waiting_telegram_id]:
        await msg.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_channel –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ"
        )
        await state.clear()
    else:
        await msg.answer(
            "ü§ñ –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ /my_channels - –º–æ–∏ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ /channel_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

# ============================================================================
# CLEANUP
# ============================================================================

async def cleanup_api_client():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."""
    await api_client.close()

# ============================================================================
# CONTEXT7 BEST PRACTICES
# ============================================================================

# [C7-ID: BOT-HANDLERS-001] - FSM –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
# [C7-ID: BOT-HANDLERS-002] - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
# [C7-ID: BOT-HANDLERS-003] - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
# [C7-ID: BOT-HANDLERS-004] - –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
# [C7-ID: BOT-HANDLERS-005] - Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è UX
# [C7-ID: BOT-HANDLERS-006] - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
# [C7-ID: BOT-HANDLERS-007] - Graceful cleanup —Ä–µ—Å—É—Ä—Å–æ–≤
