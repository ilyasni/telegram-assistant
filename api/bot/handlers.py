"""Telegram bot handlers with full functionality."""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import httpx
import structlog
import re
from typing import Optional
from config import settings

logger = structlog.get_logger()
router = Router()

# API base URL
API_BASE = "http://api:8000"


def _kb_login():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ Mini App (QR)."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å Mini App (QR)", web_app={"url": "https://produman.studio/tg/app/"})]
    ])


def _kb_login_with_invite(invite_code: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å Mini App (QR)", web_app={"url": f"https://produman.studio/tg/app/?invite={invite_code}"})]
    ])


def _kb_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="menu:channels")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="menu:add_channel")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="menu:search")],
        [InlineKeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="menu:subscription")],
    ])


def _kb_channels_list(channels: list):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤."""
    builder = InlineKeyboardBuilder()
    for channel in channels:
        builder.button(
            text=f"üì∫ {channel['title']}",
            callback_data=f"channel:view:{channel['id']}"
        )
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="menu:add_channel")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")
    builder.adjust(1)
    return builder.as_markup()


def _kb_channel_actions(channel_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞–Ω–∞–ª–æ–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"channel:delete:{channel_id}")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"channel:refresh:{channel_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:channels")],
    ])


def _kb_confirm_delete(channel_id: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"channel:delete_confirm:{channel_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"channel:view:{channel_id}")],
    ])


# –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(Command("start"))
async def cmd_start(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        # 1) –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–æ UX –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
        try:
            async with httpx.AsyncClient(timeout=5) as client:
                r = await client.get(f"{API_BASE}/api/users/{msg.from_user.id}")
                if r.status_code == 404:
                    user_data = {
                        "telegram_id": msg.from_user.id,
                        "username": msg.from_user.username
                    }
                    await client.post(f"{API_BASE}/api/users/", json=user_data)
        except Exception as e:
            logger.warning("User bootstrap failed (non-blocking)", error=str(e))

        # 2) –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ Mini App –∫–Ω–æ–ø–∫—É (baseline-first UX)
        await msg.answer(
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞.",
            reply_markup=_kb_login()
        )
        
    except Exception as e:
        logger.error("Error in cmd_start (fallback path)", error=str(e))
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Mini App, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥
        await msg.answer(
            "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞.",
            reply_markup=_kb_login()
        )


@router.message(Command("login"))
async def cmd_login(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤."""
    args = msg.text.split()
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏–Ω–≤–∞–π—Ç-–∫–æ–¥, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
    if len(args) > 1:
        invite_code = args[1]
        logger.info("Login with invite code", user_id=msg.from_user.id, invite_code=invite_code)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
        try:
            async with httpx.AsyncClient(timeout=5) as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥ —á–µ—Ä–µ–∑ API
                response = await client.get(f"{API_BASE}/api/admin/invites/{invite_code}")
                
                if response.status_code == 200:
                    invite_data = response.json()
                    logger.info("Valid invite code", invite_code=invite_code, tenant_id=invite_data.get('tenant_id'))
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º Mini App —Å –≤–∞–ª–∏–¥–Ω—ã–º –∏–Ω–≤–∞–π—Ç–æ–º
                    await msg.answer(
                        f"‚úÖ <b>–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç</b>\n\n"
                        f"–û—Ç–∫—Ä—ã–≤–∞–µ–º Mini App –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...",
                        reply_markup=_kb_login_with_invite(invite_code)
                    )
                elif response.status_code == 404:
                    await msg.answer(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–≤–∞–π—Ç-–∫–æ–¥</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login:retry")]
                        ])
                    )
                elif response.status_code == 410:
                    await msg.answer(
                        "‚ùå <b>–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ –∏—Å—Ç—ë–∫</b>\n\n"
                        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login:retry")]
                        ])
                    )
                else:
                    await msg.answer(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login:retry")]
                        ])
                    )
                    
        except httpx.TimeoutException:
            logger.warning("Timeout checking invite code", user_id=msg.from_user.id, invite_code=invite_code)
            await msg.answer(
                "‚è±Ô∏è <b>–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n"
                "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login:retry")]
                ])
            )
        except Exception as e:
            logger.error("Error checking invite code", user_id=msg.from_user.id, invite_code=invite_code, error=str(e))
            await msg.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="login:retry")]
                ])
            )
    else:
        # –û–±—ã—á–Ω—ã–π –ª–æ–≥–∏–Ω –±–µ–∑ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–∞
        await msg.answer(
            "üîê <b>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
            "–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/login INVITE_CODE</code>\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Mini App:",
            reply_markup=_kb_login()
        )


@router.message(Command("add_channel"))
async def cmd_add_channel(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_channel."""
    args = msg.text.split()
    if len(args) < 2:
        await msg.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/add_channel @channel_name</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add_channel @durov</code>"
        )
        return
    
    channel_name = args[1]
    if not channel_name.startswith('@'):
        await msg.answer("‚ùå –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
        return
    
    await _add_channel(msg, channel_name)


@router.message(Command("my_channels"))
async def cmd_my_channels(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_channels."""
    await _show_channels(msg)


@router.message(Command("ask"))
async def cmd_ask(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask –¥–ª—è RAG –ø–æ–∏—Å–∫–∞."""
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        await msg.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/ask –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ AI?</code>"
        )
        return
    
    question = args[1]
    await _rag_query(msg, question)


@router.message(Command("search"))
async def cmd_search(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search."""
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        await msg.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/search –∑–∞–ø—Ä–æ—Å</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/search –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ</code>"
        )
        return
    
    query = args[1]
    await msg.answer("üîç <b>–ü–æ–∏—Å–∫</b>\n\n–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.message(Command("recommend"))
async def cmd_recommend(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend."""
    await msg.answer("üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n–§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.message(Command("digest"))
async def cmd_digest(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /digest."""
    await msg.answer("üì∞ <b>–î–∞–π–¥–∂–µ—Å—Ç</b>\n\n–§—É–Ω–∫—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.message(Command("subscription"))
async def cmd_subscription(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription."""
    await _show_subscription(msg)


# Callback handlers

@router.callback_query(F.data == "qr:start")
async def on_qr_start(cb: CallbackQuery):
    """–§–æ–ª–±—ç–∫: –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å Mini App (QR –∂–∏–≤—ë—Ç –≤ Mini App)."""
    await cb.message.answer(
        "–û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å Mini App (QR)", web_app={"url": "https://produman.studio/tg/app/"})]
        ])
    )
    await cb.answer()


@router.callback_query(F.data == "login:retry")
async def on_login_retry(cb: CallbackQuery):
    """–§–æ–ª–±—ç–∫: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞."""
    await cb.message.edit_text(
        "üîê <b>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</b>\n\n"
        "–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/login INVITE_CODE</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Mini App:",
        reply_markup=_kb_login()
    )
    await cb.answer()


@router.callback_query(F.data == "menu:main")
async def on_menu_main(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await cb.message.edit_text(
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=_kb_main_menu()
    )
    await cb.answer()


@router.callback_query(F.data == "menu:channels")
async def on_menu_channels(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤."""
    await _show_channels_callback(cb)


@router.callback_query(F.data == "menu:add_channel")
async def on_menu_add_channel(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    await cb.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/add_channel @channel_name</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/add_channel @durov</code>"
    )
    await cb.answer()


@router.callback_query(F.data == "menu:search")
async def on_menu_search(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞."""
    await cb.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/ask –≤–∞—à –≤–æ–ø—Ä–æ—Å</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/ask –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ AI?</code>"
    )
    await cb.answer()


@router.callback_query(F.data == "menu:subscription")
async def on_menu_subscription(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏."""
    await _show_subscription_callback(cb)


@router.callback_query(F.data.startswith("channel:view:"))
async def on_channel_view(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–Ω–∞–ª–∞."""
    channel_id = cb.data.split(":")[2]
    await _show_channel_details(cb, channel_id)


@router.callback_query(F.data.startswith("channel:delete:"))
async def on_channel_delete(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    channel_id = cb.data.split(":")[2]
    await cb.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?",
        reply_markup=_kb_confirm_delete(channel_id)
    )
    await cb.answer()


@router.callback_query(F.data.startswith("channel:delete_confirm:"))
async def on_channel_delete_confirm(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞."""
    channel_id = cb.data.split(":")[2]
    await _delete_channel_callback(cb, channel_id)


# Helper functions

async def _add_channel(msg: Message, channel_name: str):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{msg.from_user.id}")
            if r.status_code == 404:
                await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            r.raise_for_status()
            user = r.json()
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        channel_data = {
            "telegram_id": -1001234567890,  # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
            "username": channel_name[1:],  # –£–±–∏—Ä–∞–µ–º @
            "title": channel_name,
            "settings": {}
        }
        
        async with httpx.AsyncClient() as client:
            r = await client.post(f"{API_BASE}/api/channels/users/{user['id']}/channels", json=channel_data)
            r.raise_for_status()
            channel = r.json()
        
        await msg.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
            f"üì∫ {channel['title']}\n"
            f"üÜî ID: {channel['id']}\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {channel['created_at'][:10]}"
        )
        
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 400:
            await msg.answer("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
    except Exception as e:
        logger.error("Error adding channel", error=str(e))
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def _show_channels(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{msg.from_user.id}")
            if r.status_code == 404:
                await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            r.raise_for_status()
            user = r.json()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/channels/users/{user['id']}/channels")
            r.raise_for_status()
            channels = r.json()
        
        if not channels:
            await msg.answer(
                "üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="menu:add_channel")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
                ])
            )
            return
        
        text = "üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n"
        for channel in channels:
            status = "üü¢" if channel['is_active'] else "üî¥"
            text += f"{status} {channel['title']}\n"
        
        await msg.answer(
            text,
            reply_markup=_kb_channels_list(channels)
        )
        
    except Exception as e:
        logger.error("Error showing channels", error=str(e))
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def _show_channels_callback(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ callback."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{cb.from_user.id}")
            if r.status_code == 404:
                await cb.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            r.raise_for_status()
            user = r.json()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/channels/users/{user['id']}/channels")
            r.raise_for_status()
            channels = r.json()
        
        if not channels:
            await cb.message.edit_text(
                "üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="menu:add_channel")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
                ])
            )
            return
        
        text = "üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n"
        for channel in channels:
            status = "üü¢" if channel['is_active'] else "üî¥"
            text += f"{status} {channel['title']}\n"
        
        await cb.message.edit_text(
            text,
            reply_markup=_kb_channels_list(channels)
        )
        
    except Exception as e:
        logger.error("Error showing channels callback", error=str(e))
        await cb.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def _show_channel_details(cb: CallbackQuery, channel_id: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–∞."""
    await cb.message.edit_text(
        f"üì∫ <b>–ö–∞–Ω–∞–ª #{channel_id}</b>\n\n"
        "–î–µ—Ç–∞–ª–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=_kb_channel_actions(channel_id)
    )
    await cb.answer()


async def _delete_channel_callback(cb: CallbackQuery, channel_id: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ callback."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{cb.from_user.id}")
            if r.status_code == 404:
                await cb.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            r.raise_for_status()
            user = r.json()
        
        # –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
        async with httpx.AsyncClient() as client:
            r = await client.delete(f"{API_BASE}/api/channels/users/{user['id']}/channels/{channel_id}")
            r.raise_for_status()
        
        await cb.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
        await cb.answer("–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
        
    except Exception as e:
        logger.error("Error deleting channel", error=str(e))
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")


async def _rag_query(msg: Message, question: str):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å RAG –∑–∞–ø—Ä–æ—Å."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{msg.from_user.id}")
            if r.status_code == 404:
                await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            r.raise_for_status()
            user = r.json()
        
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å RAG –∑–∞–ø—Ä–æ—Å
        query_data = {
            "query": question,
            "user_id": user['id']
        }
        
        async with httpx.AsyncClient() as client:
            r = await client.post(f"{API_BASE}/api/rag/query", json=query_data)
            r.raise_for_status()
            result = r.json()
        
        answer = result['result']['answer']
        sources = result['result']['sources']
        
        text = f"ü§ñ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>\n\n{answer}\n\n"
        if sources:
            text += "<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
            for source in sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                text += f"‚Ä¢ {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        
        await msg.answer(text)
        
    except Exception as e:
        logger.error("Error in RAG query", error=str(e))
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")


async def _show_subscription(msg: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{msg.from_user.id}")
            if r.status_code == 404:
                await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            r.raise_for_status()
            user = r.json()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{user['id']}/subscription")
            r.raise_for_status()
            subscription = r.json()
        
        text = f"üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['subscription_type'].upper()}</b>\n\n"
        text += f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {subscription['channels_limit']}\n"
        text += f"üìù –ü–æ—Å—Ç–æ–≤: {subscription['posts_limit']}\n"
        text += f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {subscription['rag_queries_limit']}\n"
        
        if subscription['subscription_expires_at']:
            text += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription['subscription_expires_at'][:10]}\n"
        
        await msg.answer(text)
        
    except Exception as e:
        logger.error("Error showing subscription", error=str(e))
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def _show_subscription_callback(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ callback."""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{cb.from_user.id}")
            if r.status_code == 404:
                await cb.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            r.raise_for_status()
            user = r.json()
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        async with httpx.AsyncClient() as client:
            r = await client.get(f"{API_BASE}/api/users/{user['id']}/subscription")
            r.raise_for_status()
            subscription = r.json()
        
        text = f"üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['subscription_type'].upper()}</b>\n\n"
        text += f"üì∫ –ö–∞–Ω–∞–ª–æ–≤: {subscription['channels_limit']}\n"
        text += f"üìù –ü–æ—Å—Ç–æ–≤: {subscription['posts_limit']}\n"
        text += f"üîç –ó–∞–ø—Ä–æ—Å–æ–≤: {subscription['rag_queries_limit']}\n"
        
        if subscription['subscription_expires_at']:
            text += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {subscription['subscription_expires_at'][:10]}\n"
        
        await cb.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
            ])
        )
        
    except Exception as e:
        logger.error("Error showing subscription callback", error=str(e))
        await cb.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
