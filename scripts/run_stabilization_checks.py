#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞.

Context7 best practice: –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã,
–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏, –∏ —Å–∫–≤–æ–∑–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import os
import sys
import subprocess
import structlog

logger = structlog.get_logger()

async def run_command(cmd: list, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    logger.info(f"Running: {description}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        logger.info(f"‚úÖ {description} - SUCCESS")
        if result.stdout:
            logger.debug("STDOUT", output=result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå {description} - FAILED", 
                    returncode=e.returncode,
                    stderr=e.stderr)
        return False
    except Exception as e:
        logger.error(f"‚ùå {description} - ERROR", error=str(e))
        return False

async def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
    logger.info("Checking Redis connection...")
    
    try:
        import redis.asyncio as redis
        redis_client = redis.from_url(os.getenv("REDIS_URL", "redis://redis:6379"))
        await redis_client.ping()
        await redis_client.close()
        logger.info("‚úÖ Redis connection - SUCCESS")
        return True
    except Exception as e:
        logger.error("‚ùå Redis connection - FAILED", error=str(e))
        return False

async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
    logger.info("Checking database connection...")
    
    try:
        import asyncpg
        database_url = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:postgres@localhost:5432/postgres")
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SQLAlchemy URL –≤ asyncpg DSN
        dsn = database_url.replace("postgresql+asyncpg://", "postgresql://")
        
        conn = await asyncpg.connect(dsn)
        await conn.execute("SELECT 1")
        await conn.close()
        logger.info("‚úÖ Database connection - SUCCESS")
        return True
    except Exception as e:
        logger.error("‚ùå Database connection - FAILED", error=str(e))
        return False

async def create_consumer_groups():
    """–°–æ–∑–¥–∞–Ω–∏–µ consumer groups."""
    return await run_command(
        ["python", "scripts/create_consumer_groups.py", "--create"],
        "Create consumer groups"
    )

async def run_smoke_test():
    """–ó–∞–ø—É—Å–∫ —Å–º–æ—É–∫-—Ç–µ—Å—Ç–∞."""
    return await run_command(
        ["python", "scripts/smoke_test_pipeline.py"],
        "Smoke test pipeline"
    )

async def check_telethon_ingest():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ telethon-ingest —Å–µ—Ä–≤–∏—Å–∞."""
    logger.info("Checking telethon-ingest service...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    try:
        sys.path.insert(0, "telethon-ingest")
        from database import check_sync_connection
        from event_bus_sync import EventBusSync
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        db_healthy = check_sync_connection()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        redis_url = os.getenv("REDIS_URL", "redis://redis:6379")
        event_bus = EventBusSync(redis_url)
        redis_healthy = event_bus.health_check()
        
        if db_healthy and redis_healthy:
            logger.info("‚úÖ telethon-ingest service - SUCCESS")
            return True
        else:
            logger.error("‚ùå telethon-ingest service - FAILED", 
                        db_healthy=db_healthy, 
                        redis_healthy=redis_healthy)
            return False
            
    except Exception as e:
        logger.error("‚ùå telethon-ingest service - ERROR", error=str(e))
        return False

async def check_worker_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ worker tasks."""
    logger.info("Checking worker tasks...")
    
    try:
        sys.path.insert(0, "worker")
        from database import check_async_connection
        from tasks.post_persistence_task import PostPersistenceTask
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        db_healthy = await check_async_connection()
        
        if db_healthy:
            logger.info("‚úÖ worker tasks - SUCCESS")
            return True
        else:
            logger.error("‚ùå worker tasks - FAILED", db_healthy=db_healthy)
            return False
            
    except Exception as e:
        logger.error("‚ùå worker tasks - ERROR", error=str(e))
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    logger.info("Starting stabilization checks")
    
    checks = [
        ("Redis Connection", check_redis_connection()),
        ("Database Connection", check_database_connection()),
        ("Telethon Ingest Service", check_telethon_ingest()),
        ("Worker Tasks", check_worker_tasks()),
        ("Create Consumer Groups", create_consumer_groups()),
        ("Smoke Test Pipeline", run_smoke_test()),
    ]
    
    results = []
    
    for name, check_coro in checks:
        logger.info(f"Running check: {name}")
        result = await check_coro
        results.append((name, result))
        
        if not result:
            logger.error(f"Check failed: {name}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    logger.info("=== STABILIZATION CHECKS SUMMARY ===")
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{status} - {name}")
        if result:
            passed += 1
    
    logger.info(f"Results: {passed}/{total} checks passed")
    
    if passed == total:
        logger.info("üéâ All checks passed! Pipeline is stabilized.")
        return True
    else:
        logger.error(f"‚ö†Ô∏è {total - passed} checks failed. Pipeline needs attention.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
