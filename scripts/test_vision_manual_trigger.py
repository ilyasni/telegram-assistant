#!/usr/bin/env python3
"""
Context7: –†—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä Vision —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞ –∏–∑ post_media.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_vision_manual_trigger.py --post-id <uuid>
    python scripts/test_vision_manual_trigger.py --process-oldest 5
"""

import asyncio
import os
import sys
import argparse
import json
from datetime import datetime
from typing import Optional, List, Dict, Any
from uuid import UUID
import hashlib

# Context7: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è cross-service –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: /app
if os.path.exists('/app'):
    if '/app' not in sys.path:
        sys.path.insert(0, '/app')
    api_mount = '/opt/telegram-assistant/api'
    if api_mount not in sys.path and os.path.exists(api_mount):
        sys.path.insert(0, api_mount)

import asyncpg
import redis.asyncio as redis

# Context7: –ò–º–ø–æ—Ä—Ç —Å—Ö–µ–º —Å–æ–±—ã—Ç–∏–π —Å fallback
try:
    # –ü–æ–ø—ã—Ç–∫–∞ 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from events.schemas.posts_vision_v1 import VisionUploadedEventV1, MediaFile
except ImportError:
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞
        import importlib.util
        spec = importlib.util.spec_from_file_location(
            'posts_vision_v1',
            '/app/events/schemas/posts_vision_v1.py'
        )
        if spec and spec.loader:
            mod = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(mod)
            VisionUploadedEventV1 = mod.VisionUploadedEventV1
            MediaFile = mod.MediaFile
        else:
            raise ImportError("Cannot load posts_vision_v1 module")
    except Exception:
        # –ü–æ–ø—ã—Ç–∫–∞ 3: —á–µ—Ä–µ–∑ worker.events
        from worker.events.schemas.posts_vision_v1 import VisionUploadedEventV1, MediaFile


def get_db_connection_string() -> str:
    """Context7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        return database_url.replace("postgresql+asyncpg://", "postgresql://")
    
    db_host = os.getenv("DB_HOST", os.getenv("POSTGRES_HOST", "supabase-db"))
    db_port = os.getenv("DB_PORT", os.getenv("POSTGRES_PORT", "5432"))
    db_user = os.getenv("POSTGRES_USER", "postgres")
    db_password = os.getenv("POSTGRES_PASSWORD", "") or os.getenv("DB_PASSWORD", "")
    db_name = os.getenv("POSTGRES_DB", os.getenv("DB_NAME", "postgres"))
    
    if not db_password:
        raise ValueError("DATABASE_URL –∏–ª–∏ POSTGRES_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    return f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"


def get_redis_url() -> str:
    """Context7: –ü–æ–ª—É—á–µ–Ω–∏–µ URL Redis."""
    return os.getenv("REDIS_URL", "redis://redis:6379")


async def create_vision_event_from_post_media(
    post_id: UUID,
    tenant_id: str = None
) -> Dict[str, Any]:
    """
    Context7: –°–æ–∑–¥–∞–Ω–∏–µ VisionUploadedEventV1 –¥–ª—è –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞ –∏–∑ post_media.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –º–µ–¥–∏–∞ –µ—Å—Ç—å –≤ post_media, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ S3 —á–µ—Ä–µ–∑ MediaProcessor.
    –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Vision pipeline.
    
    Args:
        post_id: UUID –ø–æ—Å—Ç–∞
        tenant_id: ID tenant (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ Vision —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}...")
    
    conn = await asyncpg.connect(get_db_connection_string())
    redis_url = get_redis_url()
    redis_client = redis.from_url(redis_url, decode_responses=False)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
        post_data = await conn.fetchrow("""
            SELECT p.id, p.channel_id, p.telegram_message_id, p.has_media,
                   (SELECT COUNT(*) FROM post_media pm WHERE pm.post_id = p.id) as media_count
            FROM posts p
            WHERE p.id = $1
        """, post_id)
        
        if not post_data:
            return {"error": f"–ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        if not post_data["has_media"] or (post_data["media_count"] or 0) == 0:
            return {"error": f"–ü–æ—Å—Ç {post_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞"}
        
        # –ü–æ–ª—É—á–∞–µ–º post_media –∑–∞–ø–∏—Å–∏
        post_media_records = await conn.fetch("""
            SELECT pm.id, pm.media_type, pm.sha256, pm.file_size_bytes, pm.media_url,
                   pm.thumbnail_url, pm.width, pm.height
            FROM post_media pm
            WHERE pm.post_id = $1
            ORDER BY pm.id
        """, post_id)
        
        # Context7: –ï—Å–ª–∏ –Ω–µ—Ç post_media –∑–∞–ø–∏—Å–µ–π, –Ω–æ has_media=true - —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
        if not post_media_records:
            print(f"‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ MediaFile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–¥–∏–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ MediaProcessor)")
            
            # –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π MediaFile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            sha256_source = f"{post_id}:test_media"
            sha256 = hashlib.sha256(sha256_source.encode()).hexdigest()
            
            # Context7: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π s3_key
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ MediaProcessor —Å–∫–∞—á–∞–µ—Ç –º–µ–¥–∏–∞ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç –≤ S3
            mime_type = "image/jpeg"
            ext = "jpg"
            s3_key = f"media/{tenant_id}/{sha256[:2]}/{sha256}.{ext}"
            
            media_file = MediaFile(
                sha256=sha256,
                s3_key=s3_key,
                mime_type=mime_type,
                size_bytes=1024 * 100,  # 100 KB –¥–ª—è —Ç–µ—Å—Ç–∞
                telegram_file_id=None
            )
            
            media_files = [media_file]
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π MediaFile: SHA256={sha256[:16]}..., size=100KB")
            print(f"  ‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ S3 - Vision Analysis –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å")
            print(f"  ‚ö†Ô∏è  –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ MediaProcessor")
        
        # Context7: –ü–æ–ª—É—á–∞–µ–º tenant_id –∏–∑ –ø–æ—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º default
        if not tenant_id:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞
            channel_data = await conn.fetchrow("""
                SELECT tenant_id FROM channels WHERE id = $1
            """, post_data["channel_id"])
            
            tenant_id = channel_data["tenant_id"] if channel_data and channel_data.get("tenant_id") else os.getenv("S3_DEFAULT_TENANT_ID", "")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º MediaFile –æ–±—ä–µ–∫—Ç—ã –∏–∑ post_media
        # Context7: –ï—Å–ª–∏ sha256 –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ media_url –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π
        media_files = []
        for idx, pm in enumerate(post_media_records):
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å sha256
            sha256 = pm["sha256"]
            
            if not sha256:
                # Context7: –ï—Å–ª–∏ sha256 –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ MediaProcessor –≤—ã—á–∏—Å–ª—è–µ—Ç SHA256 –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
                sha256_source = pm["media_url"] or f"{post_id}:{pm['id']}"
                sha256 = hashlib.sha256(sha256_source.encode()).hexdigest()
                print(f"‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π SHA256 –¥–ª—è media {pm['id']}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º s3_key (–∫–æ–Ω—Ç–µ–Ω—Ç-–∞–¥—Ä–µ—Å—É–µ–º—ã–π –ø—É—Ç—å)
            # Context7: –§–æ—Ä–º–∞—Ç: media/{tenant}/{sha256[:2]}/{sha256}.{ext}
            mime_type = "image/jpeg"  # Default, –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ media_type
            if pm["media_type"] == "photo":
                mime_type = "image/jpeg"
            elif pm["media_type"] == "video":
                mime_type = "video/mp4"
            elif pm["media_type"] == "document":
                mime_type = "application/octet-stream"
            
            ext = "jpg" if "image" in mime_type else "mp4" if "video" in mime_type else "bin"
            s3_key = f"media/{tenant_id}/{sha256[:2]}/{sha256}.{ext}"
            
            media_file = MediaFile(
                sha256=sha256,
                s3_key=s3_key,
                mime_type=mime_type,
                size_bytes=pm["file_size_bytes"] or 0,
                telegram_file_id=None  # –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
            )
            
            media_files.append(media_file)
            print(f"  ‚úÖ Media {idx+1}: {mime_type}, {pm['file_size_bytes'] or 0} bytes, SHA256={sha256[:16]}...")
        
        # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
        trace_id = f"manual-test-{datetime.utcnow().isoformat()}"
        event = VisionUploadedEventV1(
            post_id=str(post_id),
            tenant_id=tenant_id,
            media_files=media_files,
            trace_id=trace_id,
            timestamp=datetime.utcnow()
        )
        
        # –≠–º–∏—Ç–∏—Ä—É–µ–º –≤ Redis Stream
        stream_key = "stream:posts:vision"
        
        # Context7: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º event –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Redis
        event_data = {}
        event_data["event"] = "posts.vision.uploaded"
        event_data["data"] = event.model_dump_json()
        event_data["trace_id"] = trace_id
        event_data["timestamp"] = datetime.utcnow().isoformat()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Redis
        redis_event_data = {}
        for key, value in event_data.items():
            if isinstance(value, (UUID, datetime)):
                redis_event_data[key] = str(value)
            elif isinstance(value, (dict, list)):
                redis_event_data[key] = json.dumps(value)
            else:
                redis_event_data[key] = str(value)
        
        event_id = await redis_client.xadd(
            stream_key,
            redis_event_data,
            maxlen=10000  # Context7: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∏–º–∞
        )
        
        result = {
            "success": True,
            "event_id": event_id.decode() if isinstance(event_id, bytes) else event_id,
            "post_id": str(post_id),
            "media_files_count": len(media_files),
            "stream_key": stream_key,
            "trace_id": trace_id
        }
        
        print(f"\n‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis Stream:")
        print(f"   Stream: {stream_key}")
        print(f"   Event ID: {result['event_id']}")
        print(f"   Media files: {len(media_files)}")
        print(f"   Trace ID: {trace_id}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e)}
        
    finally:
        await conn.close()
        await redis_client.aclose()  # Context7: –ò—Å–ø–æ–ª—å–∑—É–µ–º aclose() –≤–º–µ—Å—Ç–æ close()


async def process_oldest_posts_with_media(count: int = 5) -> Dict[str, Any]:
    """
    Context7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å –º–µ–¥–∏–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {count} —Å—Ç–∞—Ä–µ–π—à–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å –º–µ–¥–∏–∞...")
    
    conn = await asyncpg.connect(get_db_connection_string())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–µ–π—à–∏–µ –ø–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞
        posts = await conn.fetch("""
            SELECT p.id, p.channel_id, p.telegram_message_id, p.has_media,
                   (SELECT COUNT(*) FROM post_media pm WHERE pm.post_id = p.id) as media_count
            FROM posts p
            WHERE p.has_media = true
            ORDER BY p.created_at ASC
            LIMIT $1
        """, count)
        
        if not posts:
            return {"error": "–ü–æ—Å—Ç—ã —Å –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        results = []
        for post in posts:
            post_id = post["id"]
            print(f"\nüìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ {post_id}...")
            result = await create_vision_event_from_post_media(post_id)
            results.append({
                "post_id": str(post_id),
                "result": result
            })
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            await asyncio.sleep(1)
        
        return {
            "processed": len(results),
            "results": results
        }
        
    finally:
        await conn.close()


async def main():
    """Context7: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description="–†—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä Vision —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--post-id", type=str, help="UUID –ø–æ—Å—Ç–∞ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞")
    parser.add_argument("--process-oldest", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    if args.post_id:
        result = await create_vision_event_from_post_media(UUID(args.post_id))
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(json.dumps(result, indent=2, default=str))
    elif args.process_oldest:
        result = await process_oldest_posts_with_media(args.process_oldest)
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(json.dumps(result, indent=2, default=str))
    else:
        parser.print_help()


if __name__ == "__main__":
    asyncio.run(main())

