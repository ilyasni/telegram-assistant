#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏.
–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ç–µ–≥–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π –ø—Ä–æ–º–ø—Ç.
"""

import asyncio
import json
import logging
import os
import sys
from typing import List, Dict, Any
from datetime import datetime, timezone

import asyncpg
import redis.asyncio as redis
from worker.ai_providers.gigachain_adapter import create_gigachain_adapter
from worker.events.schemas.posts_tagged_v1 import PostTaggedEventV1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def get_posts_with_bad_tags(db_pool: asyncpg.Pool) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏."""
    async with db_pool.acquire() as conn:
        query = """
        SELECT 
            p.id as post_id,
            p.content,
            p.channel_id,
            pe.tags as old_tags,
            pe.enrichment_provider
        FROM posts p
        JOIN post_enrichment pe ON p.id = pe.post_id
        WHERE pe.kind = 'tags'
          AND (pe.tags::text LIKE '%—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è–∞–Ω–∞–ª–∏—Ç–∏–∫–∞%' 
               OR pe.tags::text LIKE '%–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏%' 
               OR pe.tags::text LIKE '%—ç–∫–æ–Ω–æ–º–∏–∫–∞%')
        ORDER BY pe.updated_at DESC
        LIMIT 100;
        """
        rows = await conn.fetch(query)
        return [dict(row) for row in rows]

async def retag_post(adapter, post_data: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø–æ—Å—Ç."""
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
        results = await adapter.generate_tags_batch([post_data['content']])
        if not results or not results[0].tags:
            return None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
        new_tags = [tag.name for tag in results[0].tags if tag.name]
        
        return {
            'post_id': post_data['post_id'],
            'old_tags': post_data['old_tags'],
            'new_tags': new_tags,
            'provider': results[0].provider,
            'latency_ms': results[0].processing_time_ms
        }
    except Exception as e:
        logger.error(f"Failed to retag post {post_data['post_id']}: {e}")
        return None

async def save_new_tags(db_pool: asyncpg.Pool, retag_result: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –≤ –ë–î."""
    async with db_pool.acquire() as conn:
        async with conn.transaction():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏
            await conn.execute("""
                UPDATE post_enrichment 
                SET 
                    tags = $1::text[],
                    enrichment_provider = $2,
                    enrichment_latency_ms = $3,
                    metadata = metadata || $4::jsonb,
                    updated_at = NOW()
                WHERE post_id = $5 AND kind = 'tags'
            """, 
                retag_result['new_tags'],
                retag_result['provider'],
                retag_result['latency_ms'],
                json.dumps({
                    'retagged_at': datetime.now(timezone.utc).isoformat(),
                    'old_tags': retag_result['old_tags']
                }, ensure_ascii=False),
                retag_result['post_id']
            )

async def publish_tagged_event(redis_client: redis.Redis, retag_result: Dict[str, Any]):
    """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ posts.tagged."""
    try:
        # –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
        event = PostTaggedEventV1(
            idempotency_key=f"{retag_result['post_id']}:tagged:v1",
            post_id=retag_result['post_id'],
            tags=retag_result['new_tags'],
            tags_hash=PostTaggedEventV1.compute_hash(retag_result['new_tags']),
            provider=retag_result['provider'],
            latency_ms=retag_result['latency_ms'],
            metadata={
                'retagged': True,
                'old_tags': retag_result['old_tags']
            }
        )
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ Redis Stream
        await redis_client.xadd(
            'stream:posts:tagged',
            event.dict(),
            maxlen=10000
        )
        
        logger.info(f"Published tagged event for post {retag_result['post_id']}")
        
    except Exception as e:
        logger.error(f"Failed to publish event for post {retag_result['post_id']}: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    db_url = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/postgres")
    redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")
    
    print("üöÄ Starting post retagging...")
    print(f"Database URL: {db_url}")
    print(f"Redis URL: {redis_url}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    db_pool = await asyncpg.create_pool(db_url, min_size=1, max_size=10)
    redis_client = redis.from_url(redis_url, decode_responses=True)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ AI –∞–¥–∞–ø—Ç–µ—Ä–∞
        print("ü§ñ Creating AI adapter...")
        adapter = await create_gigachain_adapter()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø–ª–æ—Ö–∏–º–∏ —Ç–µ–≥–∞–º–∏
        print("üìä Fetching posts with bad tags...")
        posts = await get_posts_with_bad_tags(db_pool)
        print(f"Found {len(posts)} posts with bad tags")
        
        if not posts:
            print("‚úÖ No posts with bad tags found")
            return
        
        # –ü–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("üîÑ Retagging posts...")
        retagged_count = 0
        
        for i, post_data in enumerate(posts, 1):
            print(f"Processing {i}/{len(posts)}: {post_data['post_id']}")
            
            # –ü–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            retag_result = await retag_post(adapter, post_data)
            if not retag_result:
                print(f"‚ùå Failed to retag post {post_data['post_id']}")
                continue
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
            await save_new_tags(db_pool, retag_result)
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            await publish_tagged_event(redis_client, retag_result)
            
            retagged_count += 1
            print(f"‚úÖ Retagged post {post_data['post_id']}: {retag_result['old_tags']} -> {retag_result['new_tags']}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
        
        print(f"‚úÖ Successfully retagged {retagged_count} posts")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        raise
    finally:
        await adapter.close()
        await redis_client.close()
        await db_pool.close()

if __name__ == "__main__":
    asyncio.run(main())
