#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏.
"""

import asyncio
import json
import logging
import os
import sys
from typing import List, Dict, Any
from datetime import datetime, timezone

import asyncpg
import redis.asyncio as redis

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def get_posts_with_empty_tags(db_pool: asyncpg.Pool) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã —Å –ø—É—Å—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏."""
    async with db_pool.acquire() as conn:
        query = """
        SELECT 
            p.id as post_id,
            p.content,
            p.channel_id
        FROM posts p
        JOIN post_enrichment pe ON p.id = pe.post_id
        WHERE pe.kind = 'tags'
          AND pe.tags = '{}'::text[]
        ORDER BY p.created_at DESC
        LIMIT 10;
        """
        rows = await conn.fetch(query)
        return [dict(row) for row in rows]

async def generate_tags_for_post(content: str) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    words = content.lower().split()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
    stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–ø–æ', '–∑–∞', '–æ', '–æ–±', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–ø–æ—á–µ–º—É'}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ (–¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)
    keywords = [word for word in words if len(word) > 3 and word not in stop_words]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    return list(set(keywords))[:5]

async def save_new_tags(db_pool: asyncpg.Pool, post_id: str, tags: List[str]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ –≤ –ë–î."""
    async with db_pool.acquire() as conn:
        async with conn.transaction():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏
            await conn.execute("""
                UPDATE post_enrichment 
                SET 
                    tags = $1::text[],
                    enrichment_provider = 'manual_retag',
                    updated_at = NOW()
                WHERE post_id = $2 AND kind = 'tags'
            """, 
                tags,
                post_id
            )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    db_url = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/postgres")
    
    print("üöÄ Starting post retagging...")
    print(f"Database URL: {db_url}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    db_pool = await asyncpg.create_pool(db_url, min_size=1, max_size=5)
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏
        print("üìä Fetching posts with empty tags...")
        posts = await get_posts_with_empty_tags(db_pool)
        print(f"Found {len(posts)} posts with empty tags")
        
        if not posts:
            print("‚úÖ No posts with empty tags found")
            return
        
        # –ü–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("üîÑ Retagging posts...")
        retagged_count = 0
        
        for i, post_data in enumerate(posts, 1):
            print(f"Processing {i}/{len(posts)}: {post_data['post_id']}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
            tags = await generate_tags_for_post(post_data['content'])
            if not tags:
                print(f"‚ùå No tags generated for post {post_data['post_id']}")
                continue
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
            await save_new_tags(db_pool, post_data['post_id'], tags)
            
            retagged_count += 1
            print(f"‚úÖ Retagged post {post_data['post_id']}: {tags}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.1)
        
        print(f"‚úÖ Successfully retagged {retagged_count} posts")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        raise
    finally:
        await db_pool.close()

if __name__ == "__main__":
    asyncio.run(main())
