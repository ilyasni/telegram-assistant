#!/usr/bin/env python3
"""
–¢–µ—Å—Ç credentials –¥–ª—è GigaChat API
"""

import base64
import requests
import json
import ssl
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_credentials():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç credentials –¥–ª—è GigaChat API"""
    
    # Credentials –∏–∑ .env
    credentials = "your_gigachat_credentials_base64_here"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat credentials...")
    print(f"Credentials: {credentials[:20]}...")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º credentials
    try:
        decoded = base64.b64decode(credentials).decode('utf-8')
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials: {decoded}")
        
        if ':' in decoded:
            client_id, client_secret = decoded.split(':', 1)
            print(f"Client ID: {client_id}")
            print(f"Client Secret: {client_secret[:10]}...")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç credentials")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat API
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat API...")
    
    try:
        # URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_url = "https://gigachat.devices.sberbank.ru/api/v1/oauth"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Authorization": f"Basic {credentials}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "scope": "GIGACHAT_API_PERS"
        }
        
        print(f"URL: {auth_url}")
        print(f"Headers: {headers}")
        print(f"Data: {data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
        response = requests.post(auth_url, data=data, headers=headers, timeout=30, verify=False)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        print(f"Response: {response.text[:500]}...")
        
        if response.status_code == 200:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            try:
                token_data = response.json()
                print(f"Access Token: {token_data.get('access_token', 'N/A')[:20]}...")
                return True
            except:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    test_credentials()
