// [C7-ID: MINIAPP-JS-001]
const API_BASE = '/api';
let accessToken = null;
let channels = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
Telegram.WebApp.ready();
Telegram.WebApp.expand();

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async function authenticate() {
    const initData = Telegram.WebApp.initData;
    
    if (!initData) {
        showToast('–û—à–∏–±–∫–∞: initData –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return false;
    }
    
    try {
        const resp = await fetch(`${API_BASE}/auth/telegram-webapp`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({init_data: initData})
        });
        
        if (resp.ok) {
            const data = await resp.json();
            accessToken = data.access_token;
            return true;
        } else {
            const errorData = await resp.json().catch(() => ({}));
            showToast(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${errorData.detail || resp.status}`, 'error');
            return false;
        }
    } catch (e) {
        showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'error');
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
async function loadChannels() {
    const userId = Telegram.WebApp.initDataUnsafe?.user?.id;
    
    if (!userId) {
        showToast('–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    try {
        const resp = await fetch(`${API_BASE}/channels/users/${userId}/list`, {
            headers: {'Authorization': `Bearer ${accessToken}`}
        });
        
        if (resp.ok) {
            const data = await resp.json();
            channels = data.channels || [];
            renderChannels(channels);
            updateQuota(userId);
        } else {
            const errorData = await resp.json().catch(() => ({}));
            showToast(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã: ${errorData.detail || resp.status}`, 'error');
        }
    } catch (e) {
        showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
function renderChannels(channelsToRender) {
    const container = document.getElementById('channels-list');
    
    if (!channelsToRender || channelsToRender.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <h3>üì∫ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
            </div>
        `;
        return;
    }
    
    const html = channelsToRender.map(channel => `
        <div class="channel-card" data-channel-id="${channel.id}">
            <div class="channel-info">
                <h3>${escapeHtml(channel.title)}</h3>
                <p>${channel.subscribers_count || 0} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
            </div>
            <div class="channel-actions">
                <button class="btn btn-danger" onclick="deleteChannel('${channel.id}')">
                    üóëÔ∏è
                </button>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = html;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
async function addChannel() {
    const username = document.getElementById('channel-username').value.trim();
    const userId = Telegram.WebApp.initDataUnsafe?.user?.id;
    
    if (!username) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞', 'warning');
        return;
    }
    
    if (!userId) {
        showToast('–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if (!username.match(/^@?[a-zA-Z0-9_]{5,32}$/)) {
        showToast('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel_name', 'error');
        return;
    }
    
    try {
        const resp = await fetch(`${API_BASE}/channels/users/${userId}/subscribe`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({username})
        });
        
        if (resp.status === 201) {
            showToast('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
            closeModal();
            loadChannels(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
        } else if (resp.status === 409) {
            showToast('‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª', 'warning');
        } else if (resp.status === 429) {
            const data = await resp.json();
            const resetTime = new Date(data.reset * 1000).toLocaleTimeString();
            showToast(`‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–ª–µ ${resetTime}`, 'error');
        } else if (resp.status === 403) {
            const data = await resp.json();
            showToast(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: ${data.current}/${data.max}`, 'error');
        } else if (resp.status === 422) {
            showToast('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞', 'error');
        } else {
            const errorData = await resp.json().catch(() => ({}));
            showToast(`‚ùå –û—à–∏–±–∫–∞: ${errorData.detail || resp.status}`, 'error');
        }
    } catch (e) {
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
async function deleteChannel(channelId) {
    const userId = Telegram.WebApp.initDataUnsafe?.user?.id;
    
    if (!userId) {
        showToast('–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫?')) {
        return;
    }
    
    try {
        const resp = await fetch(`${API_BASE}/channels/users/${userId}/unsubscribe/${channelId}`, {
            method: 'DELETE',
            headers: {'Authorization': `Bearer ${accessToken}`}
        });
        
        if (resp.status === 204) {
            showToast('‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω', 'success');
            loadChannels(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
        } else if (resp.status === 404) {
            showToast('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        } else {
            showToast('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', 'error');
        }
    } catch (e) {
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–æ—Ç—ã
async function updateQuota(userId) {
    try {
        const resp = await fetch(`${API_BASE}/channels/users/${userId}/stats`, {
            headers: {'Authorization': `Bearer ${accessToken}`}
        });
        
        if (resp.ok) {
            const data = await resp.json();
            document.getElementById('quota-text').textContent = 
                `${data.total}/${data.max_allowed} (${data.tier})`;
        }
    } catch (e) {
        console.error('Failed to update quota', e);
    }
}

// –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
function setupSearch() {
    const searchInput = document.getElementById('search');
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.toLowerCase();
        const filtered = channels.filter(channel => 
            channel.title.toLowerCase().includes(query) ||
            (channel.username && channel.username.toLowerCase().includes(query))
        );
        renderChannels(filtered);
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showAddModal() {
    document.getElementById('add-modal').classList.add('show');
    document.getElementById('channel-username').focus();
}

function closeModal() {
    document.getElementById('add-modal').classList.remove('show');
    document.getElementById('channel-username').value = '';
}

// Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    toast.textContent = message;
    toast.className = `toast show ${type}`;
    setTimeout(() => toast.className = 'toast', 3000);
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closeModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.getElementById('add-modal').addEventListener('click', (e) => {
    if (e.target.id === 'add-modal') {
        closeModal();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(async () => {
    try {
        if (await authenticate()) {
            await loadChannels();
            setupSearch();
        }
    } catch (e) {
        console.error('App initialization failed', e);
        showToast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
})();
