version: '3.8'

services:
  # PostgreSQL Database
  supabase-db:
    image: supabase/postgres:15.1.1.78
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/volumes/db/init:/docker-entrypoint-initdb.d
    networks:
      - telegram-network
    profiles:
      - core

  # Kong API Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth,request-termination
      KONG_DNS_VALID_TTL: 1
      KONG_DNS_STALE_TTL: 0
      KONG_DNS_NOT_FOUND_TTL: 0
      KONG_DNS_ERROR_TTL: 1
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./supabase/volumes/api/kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - telegram-network
    profiles:
      - core

  # PostgREST API
  rest:
    image: postgrest/postgrest:v12.0.2
    environment:
      PGRST_DB_URI: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: public,storage,graphql_public,telegram_bot
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Postgres Meta (критичен для Studio)
  meta:
    image: supabase/postgres-meta:v0.80.0
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PASSWORD: postgres
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # GoTrue Auth
  auth:
    image: supabase/gotrue:v2.143.0
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: https://${DOMAIN}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      GOTRUE_SITE_URL: https://${DOMAIN}
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Supabase Studio
  supabase-studio:
    image: supabase/studio:latest
    environment:
      # Basic configuration
      SUPABASE_URL: http://kong:8000
      SUPABASE_API_URL: http://kong:8000
      # Explicit Studio URLs to avoid localhost fallbacks
      STUDIO_SUPABASE_URL: http://kong:8000
      STUDIO_PG_META_URL: http://meta:8080
      KONG_URL: http://kong:8000
      # Disable lints in self-hosted
      STUDIO_DISABLE_LINTS: "true"
      DISABLE_LINTS: "true"
      POSTGRES_META_URL: http://meta:8080
      # Direct connection to meta
      POSTGRES_META_HOST: meta
      POSTGRES_META_PORT: 8080
      # (no direct DB connections; Studio uses Kong and pg-meta)
      # API Keys
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_KEY}
      # Public URLs
      NEXT_PUBLIC_SUPABASE_URL: https://${SUPABASE_HOST}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_STUDIO_URL: https://${SUPABASE_HOST}
      NEXT_PUBLIC_SUPABASE_STUDIO_URL: https://${SUPABASE_HOST}
      # Project settings
      SUPABASE_PROJECT_REF: default
      SUPABASE_PROJECT_ID: default
      # JWT Secret
      SUPABASE_JWT_SECRET: ${JWT_SECRET}
      # API URLs
      SUPABASE_REST_URL: http://kong:8000/rest/v1
      SUPABASE_AUTH_URL: http://kong:8000/auth/v1
      SUPABASE_REALTIME_URL: http://kong:8000/realtime/v1
      SUPABASE_STORAGE_URL: http://kong:8000/storage/v1
      SUPABASE_FUNCTIONS_URL: http://kong:8000/functions/v1
      SUPABASE_GRAPHQL_URL: http://kong:8000/graphql/v1
    depends_on:
      - supabase-db
      - rest
      - auth
      - meta
    networks:
      - telegram-network
    profiles:
      - core

  # Realtime
  realtime:
    image: supabase/realtime:v2.25.50
    environment:
      DB_HOST: supabase-db
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: postgres
      JWT_SECRET: ${JWT_SECRET}
      API_JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Storage
  storage:
    image: supabase/storage-api:v0.46.4
    environment:
      POSTGREST_URL: http://rest:3000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      GLOBAL_S3_BUCKET: telegram-assistant-storage
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_KEY}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - supabase-db
      - rest
    networks:
      - telegram-network
    profiles:
      - core


  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - telegram-network
    profiles:
      - core

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS: 31536000
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_SUBDOMAINS: "true"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - telegram-network
    profiles:
      - core

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - telegram-network
    profiles:
      - core

volumes:
  supabase_data:
  redis_data:
  grafana_data:
  caddy_data:
  caddy_config:

networks:
  telegram-network:
    driver: bridge