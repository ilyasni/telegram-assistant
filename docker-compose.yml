services:
  # PostgreSQL Database
  supabase-db:
    image: supabase/postgres:15.1.1.78
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/volumes/db/init:/docker-entrypoint-initdb.d
    networks:
      - telegram-network
    profiles:
      - core

  # Kong API Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: cors,request-termination
      KONG_DNS_VALID_TTL: 1
      KONG_DNS_STALE_TTL: 0
      KONG_DNS_NOT_FOUND_TTL: 0
      KONG_DNS_ERROR_TTL: 1
      KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: 160k
      KONG_NGINX_PROXY_PROXY_BUFFERS: 64 160k
    volumes:
      - ./supabase/volumes/api/kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - telegram-network
    profiles:
      - core

  # PostgREST API
  rest:
    image: postgrest/postgrest:v12.0.2
    environment:
      PGRST_DB_URI: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMAS: public,storage,graphql_public,telegram_bot
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Postgres Meta (критичен для Studio)
  meta:
    image: supabase/postgres-meta:v0.80.0
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PASSWORD: postgres
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # GoTrue Auth
  auth:
    image: supabase/gotrue:v2.143.0
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: https://${DOMAIN}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      GOTRUE_SITE_URL: https://${DOMAIN}
      GOTRUE_URI_ALLOW_LIST: "*"
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Supabase Studio
  supabase-studio:
    image: supabase/studio:latest
    environment:
      # Basic configuration
      SUPABASE_URL: http://kong:8000
      SUPABASE_API_URL: http://kong:8000
      # Explicit Studio URLs to avoid localhost fallbacks
      STUDIO_SUPABASE_URL: http://kong:8000
      STUDIO_PG_META_URL: http://meta:8080
      KONG_URL: http://kong:8000
      # Disable lints in self-hosted
      STUDIO_DISABLE_LINTS: "true"
      DISABLE_LINTS: "true"
      POSTGRES_META_URL: http://meta:8080
      # Direct connection to meta
      POSTGRES_META_HOST: meta
      POSTGRES_META_PORT: 8080
      # (no direct DB connections; Studio uses Kong and pg-meta)
      # API Keys
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SERVICE_KEY}
      # Public URLs
      NEXT_PUBLIC_SUPABASE_URL: https://${SUPABASE_HOST}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_STUDIO_URL: https://${SUPABASE_HOST}
      NEXT_PUBLIC_SUPABASE_STUDIO_URL: https://${SUPABASE_HOST}
      # Project settings
      SUPABASE_PROJECT_REF: default
      SUPABASE_PROJECT_ID: default
      # JWT Secret
      SUPABASE_JWT_SECRET: ${JWT_SECRET}
      # API URLs
      SUPABASE_REST_URL: http://kong:8000/rest/v1
      SUPABASE_AUTH_URL: http://kong:8000/auth/v1
      SUPABASE_REALTIME_URL: http://kong:8000/realtime/v1
      SUPABASE_STORAGE_URL: http://kong:8000/storage/v1
      SUPABASE_FUNCTIONS_URL: http://kong:8000/functions/v1
      SUPABASE_GRAPHQL_URL: http://kong:8000/graphql/v1
      # Rename displayed project name in Studio (keep ref "default")
      STUDIO_PROJECTS: '[{"ref":"default","name":"Telegram Assistant"}]'
    depends_on:
      - supabase-db
      - rest
      - auth
      - meta
    networks:
      - telegram-network
    profiles:
      - core

  # Realtime
  realtime:
    image: supabase/realtime:v2.25.50
    environment:
      DB_HOST: supabase-db
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: postgres
      JWT_SECRET: ${JWT_SECRET}
      API_JWT_SECRET: ${JWT_SECRET}
      PORT: 4000
    depends_on:
      - supabase-db
    networks:
      - telegram-network
    profiles:
      - core

  # Storage
  storage:
    image: supabase/storage-api:v0.46.4
    environment:
      POSTGREST_URL: http://rest:3000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      GLOBAL_S3_BUCKET: telegram-assistant-storage
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_KEY}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - supabase-db
      - rest
    networks:
      - telegram-network
    profiles:
      - core


  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - telegram-network
    # Context7 best practice: health check для Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    profiles:
      - core

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}/
      GF_SERVER_DOMAIN: grafana.${DOMAIN}
      GF_SERVER_ENFORCE_DOMAIN: "true"
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS: 31536000
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_PRELOAD: "true"
      GF_SECURITY_STRICT_TRANSPORT_SECURITY_SUBDOMAINS: "true"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - telegram-network
    profiles:
      - analytics

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./webapp:/var/www/webapp:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - telegram-network
    profiles:
      - core

  # Qdrant Vector DB
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - telegram-network
    # qdrant образ не содержит curl/wget — оставляем без healthcheck
    profiles:
      - core

  # API Service (FastAPI)
  api:
    build: ./api
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      JWT_SECRET: ${JWT_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      BOT_WEBHOOK_SECRET: ${BOT_WEBHOOK_SECRET}
      BOT_PUBLIC_URL: ${BOT_PUBLIC_URL}
      DEFAULT_TENANT_ID: ${DEFAULT_TENANT_ID}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      # Context7 best practice: timezone для корректной работы с временем
      TZ: Europe/Moscow
    volumes:
      - ./webapp:/app/webapp:ro
      # Context7 best practice: монтируем timezone данные хоста
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - supabase-db
      - redis
      - qdrant
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request as u; import sys;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntry:\n    u.urlopen(\"http://localhost:8000/health\"); sys.exit(0)\nexcept Exception:\n    try:\n        u.urlopen(\"http://localhost:8000/api/health\"); sys.exit(0)\n    except Exception:\n        sys.exit(1)\n'"]
      interval: 10s
      timeout: 5s
      retries: 10
    profiles:
      - core

  # Worker Service
  worker:
    build: ./worker
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-hash-based}
      EMBEDDING_DIMENSION: ${EMBEDDING_DIMENSION:-128}
    depends_on:
      - supabase-db
      - redis
      - qdrant
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import urllib.request as u; import sys;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntry:\n    u.urlopen(\"http://localhost:8000/health\"); sys.exit(0)\nexcept Exception:\n    sys.exit(0)\n'"]
      interval: 10s
      timeout: 5s
      retries: 10
    profiles:
      - core

  # Telethon Ingest Service
  telethon-ingest:
    build: ./telethon-ingest
    environment:
      MASTER_API_ID: ${MASTER_API_ID}
      MASTER_API_HASH: ${MASTER_API_HASH}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/${POSTGRES_DB}?connect_timeout=5&application_name=telethon-ingest&keepalives=1&keepalives_idle=30&keepalives_interval=10&keepalives_count=3
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      INGEST_HEALTH_PORT: 8011
      # Context7 best practice: отладка и логи
      PYTHONUNBUFFERED: 1
      PYTHONASYNCIODEBUG: 1
      # Context7 best practice: timezone для корректной работы с временем
      TZ: Europe/Moscow
      # Отключаем прокси на время диагностики
      HTTP_PROXY: ""
      HTTPS_PROXY: ""
      ALL_PROXY: ""
    volumes:
      - ./telethon-ingest/sessions:/app/sessions  # персистентность сессий
      # Context7 best practice: монтируем timezone данные хоста
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      supabase-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telegram-network
    restart: unless-stopped  # автоматический рестарт
    # Context7 best practice: health check для telethon-ingest на порту 8011
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8011/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - core

volumes:
  supabase_data:
  redis_data:
  grafana_data:
  caddy_data:
  caddy_config:
  qdrant_data:

networks:
  telegram-network:
    driver: bridge